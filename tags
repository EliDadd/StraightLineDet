!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ADDRESS_TYPE_INET	sdk/src/hal/socket.h	/^        ADDRESS_TYPE_INET   = 1,$/;"	e	enum:rp::net::SocketAddress::address_type_t
ADDRESS_TYPE_INET6	sdk/src/hal/socket.h	/^        ADDRESS_TYPE_INET6  = 2,$/;"	e	enum:rp::net::SocketAddress::address_type_t
ADDRESS_TYPE_UNSPEC	sdk/src/hal/socket.h	/^        ADDRESS_TYPE_UNSPEC = 0,$/;"	e	enum:rp::net::SocketAddress::address_type_t
ANS_DEV_ERR	sdk/src/hal/abs_rxtx.h	/^        ANS_DEV_ERR = -2,$/;"	e	enum:rp::hal::serial_rxtx::__anon8
ANS_OK	sdk/src/hal/abs_rxtx.h	/^        ANS_OK      = 0,$/;"	e	enum:rp::hal::serial_rxtx::__anon8
ANS_TIMEOUT	sdk/src/hal/abs_rxtx.h	/^        ANS_TIMEOUT = -1,$/;"	e	enum:rp::hal::serial_rxtx::__anon8
AutoLocker	sdk/src/hal/locker.h	/^    AutoLocker(Locker &l): _binded(l)$/;"	f	class:rp::hal::AutoLocker
AutoLocker	sdk/src/hal/locker.h	/^class AutoLocker$/;"	c	namespace:rp::hal
BAUD_CONV	sdk/src/arch/linux/net_serial.cpp	433;"	d	file:
BAUD_CONV	sdk/src/arch/macOS/net_serial.cpp	302;"	d	file:
BEGIN_STATIC_CODE	sdk/src/arch/win32/timer.cpp	/^BEGIN_STATIC_CODE(timer_cailb)$/;"	f	namespace:rp::arch
BEGIN_STATIC_CODE	sdk/src/hal/util.h	59;"	d
CLASS_THREAD	sdk/src/hal/thread.h	38;"	d
ChannelDevice	sdk/include/rplidar_driver.h	/^class ChannelDevice$/;"	c	namespace:rp::standalone::rplidar
CreateDriver	sdk/src/rplidar_driver.cpp	/^RPlidarDriver * RPlidarDriver::CreateDriver(_u32 drivertype)$/;"	f	class:rp::standalone::rplidar::RPlidarDriver
CreateRxTx	sdk/src/arch/linux/net_serial.cpp	/^serial_rxtx * serial_rxtx::CreateRxTx()$/;"	f	class:rp::hal::serial_rxtx
CreateRxTx	sdk/src/arch/macOS/net_serial.cpp	/^    serial_rxtx * serial_rxtx::CreateRxTx()$/;"	f	class:rp::hal::serial_rxtx
CreateRxTx	sdk/src/arch/win32/net_serial.cpp	/^serial_rxtx * serial_rxtx::CreateRxTx()$/;"	f	class:rp::hal::serial_rxtx
CreateSocket	sdk/src/arch/linux/net_socket.cpp	/^DGramSocket * DGramSocket::CreateSocket(SocketBase::socket_family_t family)$/;"	f	class:rp::net::DGramSocket
CreateSocket	sdk/src/arch/linux/net_socket.cpp	/^StreamSocket * StreamSocket::CreateSocket(SocketBase::socket_family_t family)$/;"	f	class:rp::net::StreamSocket
CreateSocket	sdk/src/arch/macOS/net_socket.cpp	/^DGramSocket * DGramSocket::CreateSocket(SocketBase::socket_family_t family)$/;"	f	class:rp::net::DGramSocket
CreateSocket	sdk/src/arch/macOS/net_socket.cpp	/^StreamSocket * StreamSocket::CreateSocket(SocketBase::socket_family_t family)$/;"	f	class:rp::net::StreamSocket
CreateSocket	sdk/src/arch/win32/net_socket.cpp	/^DGramSocket * DGramSocket::CreateSocket(SocketBase::socket_family_t family)$/;"	f	class:rp::net::DGramSocket
CreateSocket	sdk/src/arch/win32/net_socket.cpp	/^StreamSocket * StreamSocket::CreateSocket(SocketBase::socket_family_t family)$/;"	f	class:rp::net::StreamSocket
DEFAULT_MOTOR_PWM	sdk/include/rplidar_cmd.h	103;"	d
DEFAULT_SOCKET_TIMEOUT	sdk/src/hal/socket.h	/^        DEFAULT_SOCKET_TIMEOUT = 10000, \/\/10sec$/;"	e	enum:rp::net::SocketBase::__anon9
DEFAULT_TIMEOUT	sdk/include/rplidar_driver.h	/^        DEFAULT_TIMEOUT = 2000, \/\/2000 ms$/;"	e	enum:rp::standalone::rplidar::RPlidarDriver::__anon2
DEG2RAD	src/node.cpp	44;"	d	file:
DEPRECATED	sdk/include/rplidar_driver.h	44;"	d
DEPRECATED	sdk/include/rplidar_driver.h	46;"	d
DEPRECATED	sdk/include/rplidar_driver.h	49;"	d
DEPRECATED_WARN	sdk/src/rplidar_driver.cpp	56;"	d	file:
DGramSocket	sdk/src/hal/socket.h	/^    DGramSocket() {}$/;"	f	class:rp::net::DGramSocket
DGramSocket	sdk/src/hal/socket.h	/^class _single_thread DGramSocket: public SocketBase$/;"	c	namespace:rp::net
DGramSocketImpl	sdk/src/arch/linux/net_socket.cpp	/^    DGramSocketImpl(int fd)$/;"	f	class:rp::arch::net::DGramSocketImpl
DGramSocketImpl	sdk/src/arch/linux/net_socket.cpp	/^class _single_thread DGramSocketImpl : public DGramSocket$/;"	c	namespace:rp::arch::net	file:
DGramSocketImpl	sdk/src/arch/macOS/net_socket.cpp	/^    DGramSocketImpl(int fd)$/;"	f	class:rp::arch::net::DGramSocketImpl
DGramSocketImpl	sdk/src/arch/macOS/net_socket.cpp	/^class _single_thread DGramSocketImpl : public DGramSocket$/;"	c	namespace:rp::arch::net	file:
DGramSocketImpl	sdk/src/arch/win32/net_socket.cpp	/^    DGramSocketImpl(SOCKET fd)$/;"	f	class:rp::arch::net::DGramSocketImpl
DGramSocketImpl	sdk/src/arch/win32/net_socket.cpp	/^class _single_thread DGramSocketImpl : public DGramSocket$/;"	c	namespace:rp::arch::net	file:
DRIVER_TYPE_SERIALPORT	sdk/include/rplidar_driver.h	/^    DRIVER_TYPE_SERIALPORT = 0x0,$/;"	e	enum:rp::standalone::rplidar::__anon1
DRIVER_TYPE_TCP	sdk/include/rplidar_driver.h	/^    DRIVER_TYPE_TCP = 0x1,$/;"	e	enum:rp::standalone::rplidar::__anon1
DisposeDriver	sdk/src/rplidar_driver.cpp	/^void RPlidarDriver::DisposeDriver(RPlidarDriver * drv)$/;"	f	class:rp::standalone::rplidar::RPlidarDriver
END_STATIC_CODE	sdk/src/hal/util.h	65;"	d
EVENT_FAILED	sdk/src/hal/event.h	/^        EVENT_FAILED = 0,$/;"	e	enum:rp::hal::Event::__anon11
EVENT_OK	sdk/src/hal/event.h	/^        EVENT_OK = 1,$/;"	e	enum:rp::hal::Event::__anon11
EVENT_TIMEOUT	sdk/src/hal/event.h	/^        EVENT_TIMEOUT = -1,$/;"	e	enum:rp::hal::Event::__anon11
Event	sdk/src/hal/event.h	/^    Event(bool isAutoReset = true, bool isSignal = false)$/;"	f	class:rp::hal::Event
Event	sdk/src/hal/event.h	/^class Event$/;"	c	namespace:rp::hal
HPtimer_reset	sdk/src/arch/win32/timer.cpp	/^void HPtimer_reset()$/;"	f	namespace:rp::arch
IS_FAIL	sdk/include/rptypes.h	114;"	d
IS_FAIL	sdk/src/hal/types.h	103;"	d
IS_OK	sdk/include/rptypes.h	113;"	d
IS_OK	sdk/src/hal/types.h	102;"	d
LEGACY_SAMPLE_DURATION	sdk/include/rplidar_driver.h	/^        LEGACY_SAMPLE_DURATION = 476,$/;"	e	enum:rp::standalone::rplidar::RPlidarDriver::__anon4
LOCK_FAILED	sdk/src/hal/locker.h	/^        LOCK_FAILED = 0$/;"	e	enum:rp::hal::Locker::LOCK_STATUS
LOCK_OK	sdk/src/hal/locker.h	/^        LOCK_OK = 1,$/;"	e	enum:rp::hal::Locker::LOCK_STATUS
LOCK_STATUS	sdk/src/hal/locker.h	/^    enum LOCK_STATUS$/;"	g	class:rp::hal::Locker
LOCK_TIMEOUT	sdk/src/hal/locker.h	/^        LOCK_TIMEOUT = -1,$/;"	e	enum:rp::hal::Locker::LOCK_STATUS
Locker	sdk/src/hal/locker.h	/^    Locker(){$/;"	f	class:rp::hal::Locker
Locker	sdk/src/hal/locker.h	/^class Locker$/;"	c	namespace:rp::hal
LoopUpHostName	sdk/src/arch/linux/net_socket.cpp	/^size_t SocketAddress::LoopUpHostName(const char * hostname, const char * sevicename, std::vector<SocketAddress> &addresspool , bool performDNS, SocketAddress::address_type_t type)$/;"	f	class:rp::net::SocketAddress
LoopUpHostName	sdk/src/arch/macOS/net_socket.cpp	/^size_t SocketAddress::LoopUpHostName(const char * hostname, const char * sevicename, std::vector<SocketAddress> &addresspool , bool performDNS, SocketAddress::address_type_t type)$/;"	f	class:rp::net::SocketAddress
LoopUpHostName	sdk/src/arch/win32/net_socket.cpp	/^size_t SocketAddress::LoopUpHostName(const char * hostname, const char * sevicename, std::vector<SocketAddress> &addresspool , bool performDNS, SocketAddress::address_type_t type)$/;"	f	class:rp::net::SocketAddress
MAX_BACKLOG	sdk/src/hal/socket.h	/^        MAX_BACKLOG = 128,$/;"	e	enum:rp::net::StreamSocket::__anon10
MAX_MOTOR_PWM	sdk/include/rplidar_cmd.h	102;"	d
MAX_SCAN_NODES	sdk/include/rplidar_driver.h	/^        MAX_SCAN_NODES = 8192,$/;"	e	enum:rp::standalone::rplidar::RPlidarDriver::__anon3
POLAR2XCART	src/myClient.cpp	7;"	d	file:
POLAR2YCART	src/myClient.cpp	8;"	d	file:
PRIORITY_HIGH	sdk/src/hal/thread.h	/^		PRIORITY_HIGH     = 1,$/;"	e	enum:rp::hal::Thread::priority_val_t
PRIORITY_IDLE	sdk/src/hal/thread.h	/^		PRIORITY_IDLE     = 4,$/;"	e	enum:rp::hal::Thread::priority_val_t
PRIORITY_LOW	sdk/src/hal/thread.h	/^		PRIORITY_LOW      = 3,$/;"	e	enum:rp::hal::Thread::priority_val_t
PRIORITY_NORMAL	sdk/src/hal/thread.h	/^		PRIORITY_NORMAL   = 2,$/;"	e	enum:rp::hal::Thread::priority_val_t
PRIORITY_REALTIME	sdk/src/hal/thread.h	/^		PRIORITY_REALTIME = 0,$/;"	e	enum:rp::hal::Thread::priority_val_t
RAD2DEG	src/client.cpp	41;"	d	file:
RAD2DEG	src/myClient.cpp	6;"	d	file:
RESULT_ALREADY_DONE	sdk/include/rptypes.h	104;"	d
RESULT_ALREADY_DONE	sdk/src/hal/types.h	90;"	d
RESULT_FAIL_BIT	sdk/include/rptypes.h	103;"	d
RESULT_FAIL_BIT	sdk/src/hal/types.h	89;"	d
RESULT_FORMAT_NOT_SUPPORT	sdk/include/rptypes.h	110;"	d
RESULT_FORMAT_NOT_SUPPORT	sdk/src/hal/types.h	96;"	d
RESULT_INSUFFICIENT_MEMORY	sdk/include/rptypes.h	111;"	d
RESULT_INSUFFICIENT_MEMORY	sdk/src/hal/types.h	97;"	d
RESULT_INVALID_DATA	sdk/include/rptypes.h	105;"	d
RESULT_INVALID_DATA	sdk/src/hal/types.h	91;"	d
RESULT_NOT_FOUND	sdk/src/hal/types.h	99;"	d
RESULT_OK	sdk/include/rptypes.h	102;"	d
RESULT_OK	sdk/src/hal/types.h	88;"	d
RESULT_OPERATION_ABORTED	sdk/src/hal/types.h	98;"	d
RESULT_OPERATION_FAIL	sdk/include/rptypes.h	106;"	d
RESULT_OPERATION_FAIL	sdk/src/hal/types.h	92;"	d
RESULT_OPERATION_NOT_SUPPORT	sdk/include/rptypes.h	109;"	d
RESULT_OPERATION_NOT_SUPPORT	sdk/src/hal/types.h	95;"	d
RESULT_OPERATION_STOP	sdk/include/rptypes.h	108;"	d
RESULT_OPERATION_STOP	sdk/src/hal/types.h	94;"	d
RESULT_OPERATION_TIMEOUT	sdk/include/rptypes.h	107;"	d
RESULT_OPERATION_TIMEOUT	sdk/src/hal/types.h	93;"	d
RESULT_RECONNECTING	sdk/src/hal/types.h	100;"	d
RPLIDAR_ANS_HEADER_SIZE_MASK	sdk/include/rplidar_protocol.h	48;"	d
RPLIDAR_ANS_HEADER_SUBTYPE_SHIFT	sdk/include/rplidar_protocol.h	49;"	d
RPLIDAR_ANS_PKTFLAG_LOOP	sdk/include/rplidar_protocol.h	46;"	d
RPLIDAR_ANS_SYNC_BYTE1	sdk/include/rplidar_protocol.h	43;"	d
RPLIDAR_ANS_SYNC_BYTE2	sdk/include/rplidar_protocol.h	44;"	d
RPLIDAR_ANS_TYPE_ACC_BOARD_FLAG	sdk/include/rplidar_cmd.h	131;"	d
RPLIDAR_ANS_TYPE_DEVHEALTH	sdk/include/rplidar_cmd.h	115;"	d
RPLIDAR_ANS_TYPE_DEVINFO	sdk/include/rplidar_cmd.h	114;"	d
RPLIDAR_ANS_TYPE_GET_LIDAR_CONF	sdk/include/rplidar_cmd.h	128;"	d
RPLIDAR_ANS_TYPE_MEASUREMENT	sdk/include/rplidar_cmd.h	117;"	d
RPLIDAR_ANS_TYPE_MEASUREMENT_CAPSULED	sdk/include/rplidar_cmd.h	119;"	d
RPLIDAR_ANS_TYPE_MEASUREMENT_CAPSULED_ULTRA	sdk/include/rplidar_cmd.h	126;"	d
RPLIDAR_ANS_TYPE_MEASUREMENT_HQ	sdk/include/rplidar_cmd.h	120;"	d
RPLIDAR_ANS_TYPE_SAMPLE_RATE	sdk/include/rplidar_cmd.h	124;"	d
RPLIDAR_ANS_TYPE_SET_LIDAR_CONF	sdk/include/rplidar_cmd.h	129;"	d
RPLIDAR_CMDFLAG_HAS_PAYLOAD	sdk/include/rplidar_protocol.h	40;"	d
RPLIDAR_CMD_EXPRESS_SCAN	sdk/include/rplidar_cmd.h	58;"	d
RPLIDAR_CMD_FORCE_SCAN	sdk/include/rplidar_cmd.h	45;"	d
RPLIDAR_CMD_GET_ACC_BOARD_FLAG	sdk/include/rplidar_cmd.h	64;"	d
RPLIDAR_CMD_GET_DEVICE_HEALTH	sdk/include/rplidar_cmd.h	51;"	d
RPLIDAR_CMD_GET_DEVICE_INFO	sdk/include/rplidar_cmd.h	50;"	d
RPLIDAR_CMD_GET_LIDAR_CONF	sdk/include/rplidar_cmd.h	60;"	d
RPLIDAR_CMD_GET_SAMPLERATE	sdk/include/rplidar_cmd.h	53;"	d
RPLIDAR_CMD_HQ_MOTOR_SPEED_CTRL	sdk/include/rplidar_cmd.h	55;"	d
RPLIDAR_CMD_HQ_SCAN	sdk/include/rplidar_cmd.h	59;"	d
RPLIDAR_CMD_RESET	sdk/include/rplidar_cmd.h	46;"	d
RPLIDAR_CMD_SCAN	sdk/include/rplidar_cmd.h	44;"	d
RPLIDAR_CMD_SET_LIDAR_CONF	sdk/include/rplidar_cmd.h	61;"	d
RPLIDAR_CMD_SET_MOTOR_PWM	sdk/include/rplidar_cmd.h	63;"	d
RPLIDAR_CMD_STOP	sdk/include/rplidar_cmd.h	43;"	d
RPLIDAR_CMD_SYNC_BYTE	sdk/include/rplidar_protocol.h	39;"	d
RPLIDAR_CONF_ANGLE_RANGE	sdk/include/rplidar_cmd.h	226;"	d
RPLIDAR_CONF_DESIRED_ROT_FREQ	sdk/include/rplidar_cmd.h	227;"	d
RPLIDAR_CONF_MAX_DISTANCE	sdk/include/rplidar_cmd.h	231;"	d
RPLIDAR_CONF_MAX_ROT_FREQ	sdk/include/rplidar_cmd.h	230;"	d
RPLIDAR_CONF_MIN_ROT_FREQ	sdk/include/rplidar_cmd.h	229;"	d
RPLIDAR_CONF_SCAN_COMMAND_BITMAP	sdk/include/rplidar_cmd.h	228;"	d
RPLIDAR_CONF_SCAN_COMMAND_BOOST	sdk/include/rplidar_cmd.h	222;"	d
RPLIDAR_CONF_SCAN_COMMAND_EXPRESS	sdk/include/rplidar_cmd.h	220;"	d
RPLIDAR_CONF_SCAN_COMMAND_HQ	sdk/include/rplidar_cmd.h	221;"	d
RPLIDAR_CONF_SCAN_COMMAND_SENSITIVITY	sdk/include/rplidar_cmd.h	224;"	d
RPLIDAR_CONF_SCAN_COMMAND_STABILITY	sdk/include/rplidar_cmd.h	223;"	d
RPLIDAR_CONF_SCAN_COMMAND_STD	sdk/include/rplidar_cmd.h	219;"	d
RPLIDAR_CONF_SCAN_MODE_ANS_TYPE	sdk/include/rplidar_cmd.h	236;"	d
RPLIDAR_CONF_SCAN_MODE_COUNT	sdk/include/rplidar_cmd.h	233;"	d
RPLIDAR_CONF_SCAN_MODE_MAX_DISTANCE	sdk/include/rplidar_cmd.h	235;"	d
RPLIDAR_CONF_SCAN_MODE_NAME	sdk/include/rplidar_cmd.h	238;"	d
RPLIDAR_CONF_SCAN_MODE_TYPICAL	sdk/include/rplidar_cmd.h	237;"	d
RPLIDAR_CONF_SCAN_MODE_US_PER_SAMPLE	sdk/include/rplidar_cmd.h	234;"	d
RPLIDAR_EXPRESS_SCAN_FLAG_BOOST	sdk/include/rplidar_cmd.h	76;"	d
RPLIDAR_EXPRESS_SCAN_FLAG_SUNLIGHT_REJECTION	sdk/include/rplidar_cmd.h	77;"	d
RPLIDAR_EXPRESS_SCAN_MODE_FIXANGLE	sdk/include/rplidar_cmd.h	74;"	d
RPLIDAR_EXPRESS_SCAN_MODE_NORMAL	sdk/include/rplidar_cmd.h	73;"	d
RPLIDAR_EXPRESS_SCAN_SENSITIVITY_BITMAP	sdk/include/rplidar_cmd.h	240;"	d
RPLIDAR_EXPRESS_SCAN_STABILITY_BITMAP	sdk/include/rplidar_cmd.h	239;"	d
RPLIDAR_HQ_SCAN_FLAG_CCW	sdk/include/rplidar_cmd.h	83;"	d
RPLIDAR_HQ_SCAN_FLAG_RAW_DISTANCE	sdk/include/rplidar_cmd.h	85;"	d
RPLIDAR_HQ_SCAN_FLAG_RAW_ENCODER	sdk/include/rplidar_cmd.h	84;"	d
RPLIDAR_RESP_ACC_BOARD_FLAG_MOTOR_CTRL_SUPPORT_MASK	sdk/include/rplidar_cmd.h	133;"	d
RPLIDAR_RESP_HQ_FLAG_SYNCBIT	sdk/include/rplidar_cmd.h	146;"	d
RPLIDAR_RESP_MEASUREMENT_ANGLE_SHIFT	sdk/include/rplidar_cmd.h	149;"	d
RPLIDAR_RESP_MEASUREMENT_CHECKBIT	sdk/include/rplidar_cmd.h	148;"	d
RPLIDAR_RESP_MEASUREMENT_EXP_ANGLE_MASK	sdk/include/rplidar_cmd.h	163;"	d
RPLIDAR_RESP_MEASUREMENT_EXP_DISTANCE_MASK	sdk/include/rplidar_cmd.h	164;"	d
RPLIDAR_RESP_MEASUREMENT_EXP_SYNCBIT	sdk/include/rplidar_cmd.h	178;"	d
RPLIDAR_RESP_MEASUREMENT_EXP_SYNC_1	sdk/include/rplidar_cmd.h	173;"	d
RPLIDAR_RESP_MEASUREMENT_EXP_SYNC_2	sdk/include/rplidar_cmd.h	174;"	d
RPLIDAR_RESP_MEASUREMENT_EXP_ULTRA_MAJOR_BITS	sdk/include/rplidar_cmd.h	188;"	d
RPLIDAR_RESP_MEASUREMENT_EXP_ULTRA_PREDICT_BITS	sdk/include/rplidar_cmd.h	189;"	d
RPLIDAR_RESP_MEASUREMENT_HQ_SYNC	sdk/include/rplidar_cmd.h	176;"	d
RPLIDAR_RESP_MEASUREMENT_QUALITY_SHIFT	sdk/include/rplidar_cmd.h	144;"	d
RPLIDAR_RESP_MEASUREMENT_SYNCBIT	sdk/include/rplidar_cmd.h	143;"	d
RPLIDAR_SDK_VERSION	sdk/include/rplidar.h	44;"	d
RPLIDAR_STATUS_ERROR	sdk/include/rplidar_cmd.h	141;"	d
RPLIDAR_STATUS_OK	sdk/include/rplidar_cmd.h	139;"	d
RPLIDAR_STATUS_WARNING	sdk/include/rplidar_cmd.h	140;"	d
RPLIDAR_ULTRAEXPRESS_SCAN_FLAG_HIGH_SENSITIVITY	sdk/include/rplidar_cmd.h	81;"	d
RPLIDAR_ULTRAEXPRESS_SCAN_FLAG_STD	sdk/include/rplidar_cmd.h	80;"	d
RPLIDAR_VARBITSCALE_GET_SRC_MAX_VAL_BY_BITS	sdk/include/rplidar_cmd.h	275;"	d
RPLIDAR_VARBITSCALE_X16_DEST_VAL	sdk/include/rplidar_cmd.h	273;"	d
RPLIDAR_VARBITSCALE_X16_SRC_BIT	sdk/include/rplidar_cmd.h	268;"	d
RPLIDAR_VARBITSCALE_X2_DEST_VAL	sdk/include/rplidar_cmd.h	270;"	d
RPLIDAR_VARBITSCALE_X2_SRC_BIT	sdk/include/rplidar_cmd.h	265;"	d
RPLIDAR_VARBITSCALE_X4_DEST_VAL	sdk/include/rplidar_cmd.h	271;"	d
RPLIDAR_VARBITSCALE_X4_SRC_BIT	sdk/include/rplidar_cmd.h	266;"	d
RPLIDAR_VARBITSCALE_X8_DEST_VAL	sdk/include/rplidar_cmd.h	272;"	d
RPLIDAR_VARBITSCALE_X8_SRC_BIT	sdk/include/rplidar_cmd.h	267;"	d
RPMODULE_EXPORT	sdk/src/hal/types.h	27;"	d
RPMODULE_EXPORT	sdk/src/hal/types.h	34;"	d
RPMODULE_IMPEXP	sdk/src/hal/types.h	111;"	d
RPMODULE_IMPEXP	sdk/src/hal/types.h	113;"	d
RPMODULE_IMPEXP	sdk/src/hal/types.h	116;"	d
RPMODULE_IMPORT	sdk/src/hal/types.h	28;"	d
RPMODULE_IMPORT	sdk/src/hal/types.h	35;"	d
RPlidarDriver	sdk/include/rplidar_driver.h	/^    RPlidarDriver(){}$/;"	f	class:rp::standalone::rplidar::RPlidarDriver
RPlidarDriver	sdk/include/rplidar_driver.h	/^class RPlidarDriver {$/;"	c	namespace:rp::standalone::rplidar
RPlidarDriverImplCommon	sdk/src/rplidar_driver.cpp	/^RPlidarDriverImplCommon::RPlidarDriverImplCommon()$/;"	f	class:rp::standalone::rplidar::RPlidarDriverImplCommon
RPlidarDriverImplCommon	sdk/src/rplidar_driver_impl.h	/^    class RPlidarDriverImplCommon : public RPlidarDriver$/;"	c	namespace:rp::standalone::rplidar
RPlidarDriverSerial	sdk/src/rplidar_driver.cpp	/^RPlidarDriverSerial::RPlidarDriverSerial() $/;"	f	class:rp::standalone::rplidar::RPlidarDriverSerial
RPlidarDriverSerial	sdk/src/rplidar_driver_serial.h	/^class RPlidarDriverSerial : public RPlidarDriverImplCommon$/;"	c	namespace:rp::standalone::rplidar
RPlidarDriverTCP	sdk/src/rplidar_driver.cpp	/^RPlidarDriverTCP::RPlidarDriverTCP() $/;"	f	class:rp::standalone::rplidar::RPlidarDriverTCP
RPlidarDriverTCP	sdk/src/rplidar_driver_TCP.h	/^class RPlidarDriverTCP : public RPlidarDriverImplCommon$/;"	c	namespace:rp::standalone::rplidar
ReleaseRxTx	sdk/include/rplidar_driver.h	/^    virtual void ReleaseRxTx() {return;}$/;"	f	class:rp::standalone::rplidar::ChannelDevice
ReleaseRxTx	sdk/src/arch/linux/net_serial.cpp	/^void serial_rxtx::ReleaseRxTx(serial_rxtx *rxtx)$/;"	f	class:rp::hal::serial_rxtx
ReleaseRxTx	sdk/src/arch/macOS/net_serial.cpp	/^    void serial_rxtx::ReleaseRxTx(serial_rxtx *rxtx)$/;"	f	class:rp::hal::serial_rxtx
ReleaseRxTx	sdk/src/arch/win32/net_serial.cpp	/^void  serial_rxtx::ReleaseRxTx( serial_rxtx * rxtx)$/;"	f	class:rp::hal::serial_rxtx
ReleaseRxTx	sdk/src/rplidar_driver_serial.h	/^    void ReleaseRxTx()$/;"	f	class:rp::standalone::rplidar::SerialChannelDevice
RplidarScanMode	sdk/include/rplidar_driver.h	/^struct RplidarScanMode {$/;"	s	namespace:rp::standalone::rplidar
SERIAL_RX_BUFFER_SIZE	sdk/src/arch/linux/net_serial.h	/^        SERIAL_RX_BUFFER_SIZE = 512,$/;"	e	enum:rp::arch::net::raw_serial::__anon6
SERIAL_RX_BUFFER_SIZE	sdk/src/arch/macOS/net_serial.h	/^        SERIAL_RX_BUFFER_SIZE = 512,$/;"	e	enum:rp::arch::net::raw_serial::__anon7
SERIAL_RX_BUFFER_SIZE	sdk/src/arch/win32/net_serial.h	/^        SERIAL_RX_BUFFER_SIZE = 512,$/;"	e	enum:rp::arch::net::raw_serial::__anon5
SERIAL_RX_TIMEOUT	sdk/src/arch/win32/net_serial.h	/^        SERIAL_RX_TIMEOUT     = 2000,$/;"	e	enum:rp::arch::net::raw_serial::__anon5
SERIAL_TX_BUFFER_SIZE	sdk/src/arch/linux/net_serial.h	/^        SERIAL_TX_BUFFER_SIZE = 128,$/;"	e	enum:rp::arch::net::raw_serial::__anon6
SERIAL_TX_BUFFER_SIZE	sdk/src/arch/macOS/net_serial.h	/^        SERIAL_TX_BUFFER_SIZE = 128,$/;"	e	enum:rp::arch::net::raw_serial::__anon7
SERIAL_TX_BUFFER_SIZE	sdk/src/arch/win32/net_serial.h	/^        SERIAL_TX_BUFFER_SIZE = 128,$/;"	e	enum:rp::arch::net::raw_serial::__anon5
SERIAL_TX_TIMEOUT	sdk/src/arch/win32/net_serial.h	/^        SERIAL_TX_TIMEOUT     = 2000,$/;"	e	enum:rp::arch::net::raw_serial::__anon5
SOCKET_DIR_BOTH	sdk/src/hal/socket.h	/^        SOCKET_DIR_BOTH = (SOCKET_DIR_RD | SOCKET_DIR_WR),$/;"	e	enum:rp::net::SocketBase::socket_direction_mask
SOCKET_DIR_RD	sdk/src/hal/socket.h	/^        SOCKET_DIR_RD = 0x1,$/;"	e	enum:rp::net::SocketBase::socket_direction_mask
SOCKET_DIR_WR	sdk/src/hal/socket.h	/^        SOCKET_DIR_WR = 0x2,$/;"	e	enum:rp::net::SocketBase::socket_direction_mask
SOCKET_FAMILY_INET	sdk/src/hal/socket.h	/^        SOCKET_FAMILY_INET  = 0,$/;"	e	enum:rp::net::SocketBase::socket_family_t
SOCKET_FAMILY_INET6	sdk/src/hal/socket.h	/^        SOCKET_FAMILY_INET6 = 1,$/;"	e	enum:rp::net::SocketBase::socket_family_t
SOCKET_FAMILY_RAW	sdk/src/hal/socket.h	/^        SOCKET_FAMILY_RAW   = 2,$/;"	e	enum:rp::net::SocketBase::socket_family_t
SerialChannelDevice	sdk/src/rplidar_driver_serial.h	/^    SerialChannelDevice():_rxtxSerial(rp::hal::serial_rxtx::CreateRxTx()){}$/;"	f	class:rp::standalone::rplidar::SerialChannelDevice
SerialChannelDevice	sdk/src/rplidar_driver_serial.h	/^class SerialChannelDevice :public ChannelDevice$/;"	c	namespace:rp::standalone::rplidar
SocketAddress	sdk/src/arch/linux/net_socket.cpp	/^SocketAddress::SocketAddress() $/;"	f	class:rp::net::SocketAddress
SocketAddress	sdk/src/arch/linux/net_socket.cpp	/^SocketAddress::SocketAddress(const SocketAddress & src)$/;"	f	class:rp::net::SocketAddress
SocketAddress	sdk/src/arch/linux/net_socket.cpp	/^SocketAddress::SocketAddress(const char * addrString, int port, SocketAddress::address_type_t type)$/;"	f	class:rp::net::SocketAddress
SocketAddress	sdk/src/arch/linux/net_socket.cpp	/^SocketAddress::SocketAddress(void * platform_data)$/;"	f	class:rp::net::SocketAddress
SocketAddress	sdk/src/arch/macOS/net_socket.cpp	/^SocketAddress::SocketAddress() $/;"	f	class:rp::net::SocketAddress
SocketAddress	sdk/src/arch/macOS/net_socket.cpp	/^SocketAddress::SocketAddress(const SocketAddress & src)$/;"	f	class:rp::net::SocketAddress
SocketAddress	sdk/src/arch/macOS/net_socket.cpp	/^SocketAddress::SocketAddress(const char * addrString, int port, SocketAddress::address_type_t type)$/;"	f	class:rp::net::SocketAddress
SocketAddress	sdk/src/arch/macOS/net_socket.cpp	/^SocketAddress::SocketAddress(void * platform_data)$/;"	f	class:rp::net::SocketAddress
SocketAddress	sdk/src/arch/win32/net_socket.cpp	/^SocketAddress::SocketAddress() $/;"	f	class:rp::net::SocketAddress
SocketAddress	sdk/src/arch/win32/net_socket.cpp	/^SocketAddress::SocketAddress(const SocketAddress & src)$/;"	f	class:rp::net::SocketAddress
SocketAddress	sdk/src/arch/win32/net_socket.cpp	/^SocketAddress::SocketAddress(const char * addrString, int port, SocketAddress::address_type_t type)$/;"	f	class:rp::net::SocketAddress
SocketAddress	sdk/src/arch/win32/net_socket.cpp	/^SocketAddress::SocketAddress(void * platform_data)$/;"	f	class:rp::net::SocketAddress
SocketAddress	sdk/src/hal/socket.h	/^class _single_thread SocketAddress $/;"	c	namespace:rp::net
SocketBase	sdk/src/hal/socket.h	/^    SocketBase() {} $/;"	f	class:rp::net::SocketBase
SocketBase	sdk/src/hal/socket.h	/^class SocketBase $/;"	c	namespace:rp::net
StreamSocket	sdk/src/hal/socket.h	/^    StreamSocket() {}$/;"	f	class:rp::net::StreamSocket
StreamSocket	sdk/src/hal/socket.h	/^class _single_thread StreamSocket : public SocketBase$/;"	c	namespace:rp::net
StreamSocketImpl	sdk/src/arch/linux/net_socket.cpp	/^    StreamSocketImpl(int fd)$/;"	f	class:rp::arch::net::StreamSocketImpl
StreamSocketImpl	sdk/src/arch/linux/net_socket.cpp	/^class _single_thread StreamSocketImpl : public StreamSocket$/;"	c	namespace:rp::arch::net	file:
StreamSocketImpl	sdk/src/arch/macOS/net_socket.cpp	/^    StreamSocketImpl(int fd)$/;"	f	class:rp::arch::net::StreamSocketImpl
StreamSocketImpl	sdk/src/arch/macOS/net_socket.cpp	/^class _single_thread StreamSocketImpl : public StreamSocket$/;"	c	namespace:rp::arch::net	file:
StreamSocketImpl	sdk/src/arch/win32/net_socket.cpp	/^    StreamSocketImpl(SOCKET fd)$/;"	f	class:rp::arch::net::StreamSocketImpl
StreamSocketImpl	sdk/src/arch/win32/net_socket.cpp	/^class _single_thread StreamSocketImpl : public StreamSocket$/;"	c	namespace:rp::arch::net	file:
TCPChannelDevice	sdk/src/rplidar_driver_TCP.h	/^    TCPChannelDevice():_binded_socket(rp::net::StreamSocket::CreateSocket()){}$/;"	f	class:rp::standalone::rplidar::TCPChannelDevice
TCPChannelDevice	sdk/src/rplidar_driver_TCP.h	/^class TCPChannelDevice :public ChannelDevice$/;"	c	namespace:rp::standalone::rplidar
THREAD_PROC	sdk/include/rptypes.h	84;"	d
THREAD_PROC	sdk/include/rptypes.h	87;"	d
THREAD_PROC	sdk/include/rptypes.h	90;"	d
THREAD_PROC	sdk/include/rptypes.h	93;"	d
THREAD_PROC	sdk/include/rptypes.h	96;"	d
THREAD_PROC	sdk/src/hal/types.h	63;"	d
THREAD_PROC	sdk/src/hal/types.h	66;"	d
THREAD_PROC	sdk/src/hal/types.h	69;"	d
THREAD_PROC	sdk/src/hal/types.h	72;"	d
THREAD_PROC	sdk/src/hal/types.h	75;"	d
Thread	sdk/src/hal/thread.h	/^    Thread( thread_proc_t proc, void * data ): _data(data),_func(proc), _handle(0)  {}$/;"	f	class:rp::hal::Thread
Thread	sdk/src/hal/thread.h	/^    Thread():  _data(NULL),_func(NULL),_handle(0)  {}$/;"	f	class:rp::hal::Thread
Thread	sdk/src/hal/thread.h	/^class Thread$/;"	c	namespace:rp::hal
WINVER	sdk/src/arch/win32/arch_win32.h	41;"	d
_CRT_SECURE_NO_WARNINGS	sdk/src/arch/win32/arch_win32.h	38;"	d
_HqToNormal	sdk/src/rplidar_driver.cpp	/^void RPlidarDriverImplCommon::_HqToNormal(const rplidar_response_hq_capsule_measurement_nodes_t & node_hq, rplidar_response_measurement_node_hq_t *nodebuffer, size_t &nodeCount) $/;"	f	class:rp::standalone::rplidar::RPlidarDriverImplCommon
_INFRA_HAL_ASSERT_H	sdk/src/hal/assert.h	2;"	d
_INFRA_HAL_TYPES_H_	sdk/src/hal/types.h	6;"	d
_RICHEDIT_VER	sdk/src/arch/win32/arch_win32.h	54;"	d
_WIN32_IE	sdk/src/arch/win32/arch_win32.h	50;"	d
_WIN32_WINNT	sdk/src/arch/win32/arch_win32.h	45;"	d
_WINSOCKAPI_	sdk/src/arch/win32/net_socket.cpp	9;"	d	file:
__attribute__	sdk/include/rptypes.h	77;"	d
__attribute__	sdk/src/hal/types.h	56;"	d
__be	sdk/src/hal/types.h	81;"	d
__byteswap_16	sdk/src/hal/byteops.h	/^static inline _u16 __byteswap_16(_u16 x)$/;"	f
__byteswap_32	sdk/src/hal/byteops.h	/^static inline _u32 __byteswap_32(_u32 x)$/;"	f
__byteswap_64	sdk/src/hal/byteops.h	/^static inline _u64 __byteswap_64(_u64 x)$/;"	f
__byteswap_double	sdk/src/hal/byteops.h	/^static inline double __byteswap_double(double x)$/;"	f
__byteswap_float	sdk/src/hal/byteops.h	/^static inline float __byteswap_float(float x)$/;"	f
__fast_swap	sdk/src/hal/byteops.h	34;"	d
__le	sdk/src/hal/types.h	80;"	d
__small_endian	sdk/include/rptypes.h	74;"	d
__small_endian	sdk/src/hal/types.h	53;"	d
__static_byteswap_16	sdk/src/hal/byteops.h	13;"	d
__static_byteswap_32	sdk/src/hal/byteops.h	17;"	d
__static_byteswap_64	sdk/src/hal/byteops.h	23;"	d
_baudrate	sdk/src/arch/linux/net_serial.h	/^    uint32_t _baudrate;$/;"	m	class:rp::arch::net::raw_serial
_baudrate	sdk/src/arch/macOS/net_serial.h	/^    uint32_t _baudrate;$/;"	m	class:rp::arch::net::raw_serial
_baudrate	sdk/src/arch/win32/net_serial.h	/^    uint32_t _baudrate;$/;"	m	class:rp::arch::net::raw_serial
_binded	sdk/src/hal/locker.h	/^    Locker & _binded;$/;"	m	class:rp::hal::AutoLocker
_binded_socket	sdk/src/rplidar_driver_TCP.h	/^    rp::net::StreamSocket * _binded_socket;$/;"	m	class:rp::standalone::rplidar::TCPChannelDevice
_bitrev	sdk/src/rplidar_driver.cpp	/^static _u32 _bitrev(_u32 input, _u16 bw)$/;"	f	namespace:rp::standalone::rplidar
_cacheCapsuledScanData	sdk/src/rplidar_driver.cpp	/^u_result RPlidarDriverImplCommon::_cacheCapsuledScanData()$/;"	f	class:rp::standalone::rplidar::RPlidarDriverImplCommon
_cacheHqScanData	sdk/src/rplidar_driver.cpp	/^u_result RPlidarDriverImplCommon::_cacheHqScanData()$/;"	f	class:rp::standalone::rplidar::RPlidarDriverImplCommon
_cacheScanData	sdk/src/rplidar_driver.cpp	/^u_result RPlidarDriverImplCommon::_cacheScanData()$/;"	f	class:rp::standalone::rplidar::RPlidarDriverImplCommon
_cacheUltraCapsuledScanData	sdk/src/rplidar_driver.cpp	/^u_result RPlidarDriverImplCommon::_cacheUltraCapsuledScanData()$/;"	f	class:rp::standalone::rplidar::RPlidarDriverImplCommon
_cached_previous_Hqdata	sdk/src/rplidar_driver_impl.h	/^    rplidar_response_hq_capsule_measurement_nodes_t _cached_previous_Hqdata;$/;"	m	class:rp::standalone::rplidar::RPlidarDriverImplCommon
_cached_previous_capsuledata	sdk/src/rplidar_driver_impl.h	/^    rplidar_response_capsule_measurement_nodes_t _cached_previous_capsuledata;$/;"	m	class:rp::standalone::rplidar::RPlidarDriverImplCommon
_cached_previous_ultracapsuledata	sdk/src/rplidar_driver_impl.h	/^    rplidar_response_ultra_capsule_measurement_nodes_t _cached_previous_ultracapsuledata;$/;"	m	class:rp::standalone::rplidar::RPlidarDriverImplCommon
_cached_sampleduration_express	sdk/src/rplidar_driver_impl.h	/^    _u16                    _cached_sampleduration_express;$/;"	m	class:rp::standalone::rplidar::RPlidarDriverImplCommon
_cached_sampleduration_std	sdk/src/rplidar_driver_impl.h	/^    _u16                    _cached_sampleduration_std;$/;"	m	class:rp::standalone::rplidar::RPlidarDriverImplCommon
_cached_scan_node_hq_buf	sdk/src/rplidar_driver_impl.h	/^    rplidar_response_measurement_node_hq_t   _cached_scan_node_hq_buf[8192];$/;"	m	class:rp::standalone::rplidar::RPlidarDriverImplCommon
_cached_scan_node_hq_buf_for_interval_retrieve	sdk/src/rplidar_driver_impl.h	/^    rplidar_response_measurement_node_hq_t   _cached_scan_node_hq_buf_for_interval_retrieve[8192];$/;"	m	class:rp::standalone::rplidar::RPlidarDriverImplCommon
_cached_scan_node_hq_count	sdk/src/rplidar_driver_impl.h	/^    size_t                                   _cached_scan_node_hq_count;$/;"	m	class:rp::standalone::rplidar::RPlidarDriverImplCommon
_cached_scan_node_hq_count_for_interval_retrieve	sdk/src/rplidar_driver_impl.h	/^    size_t                                   _cached_scan_node_hq_count_for_interval_retrieve;$/;"	m	class:rp::standalone::rplidar::RPlidarDriverImplCommon
_cachethread	sdk/src/rplidar_driver_impl.h	/^    rp::hal::Thread _cachethread;$/;"	m	class:rp::standalone::rplidar::RPlidarDriverImplCommon
_capsuleToNormal	sdk/src/rplidar_driver.cpp	/^void     RPlidarDriverImplCommon::_capsuleToNormal(const rplidar_response_capsule_measurement_nodes_t & capsule, rplidar_response_measurement_node_hq_t *nodebuffer, size_t &nodeCount)$/;"	f	class:rp::standalone::rplidar::RPlidarDriverImplCommon
_chanDev	sdk/include/rplidar_driver.h	/^    ChannelDevice* _chanDev;$/;"	m	class:rp::standalone::rplidar::RPlidarDriver
_checkWSAStartup	sdk/src/arch/win32/net_socket.cpp	/^static inline bool _checkWSAStartup() {$/;"	f	namespace:rp::net
_closePending	sdk/src/rplidar_driver_serial.h	/^    bool _closePending;$/;"	m	class:rp::standalone::rplidar::SerialChannelDevice
_co	sdk/src/arch/win32/net_serial.h	/^    COMMTIMEOUTS _co;$/;"	m	class:rp::arch::net::raw_serial
_cond_locker	sdk/src/hal/event.h	/^        pthread_mutex_t        _cond_locker;$/;"	m	class:rp::hal::Event
_cond_var	sdk/src/hal/event.h	/^        pthread_cond_t         _cond_var;$/;"	m	class:rp::hal::Event
_countof	sdk/src/hal/util.h	42;"	d
_countof	sdk/src/hal/util.h	48;"	d
_countof	src/node.cpp	41;"	d	file:
_crc32	sdk/src/rplidar_driver.cpp	/^static u_result _crc32(_u8 *ptr, _u32 len) {$/;"	f	namespace:rp::standalone::rplidar
_crc32_init	sdk/src/rplidar_driver.cpp	/^static void _crc32_init(_u32 poly)$/;"	f	namespace:rp::standalone::rplidar
_crc32cal	sdk/src/rplidar_driver.cpp	/^static _u32 _crc32cal(_u32 crc, void* input, _u16 len)$/;"	f	namespace:rp::standalone::rplidar
_current_freq	sdk/src/arch/win32/timer.cpp	/^static LARGE_INTEGER _current_freq;$/;"	m	namespace:rp::arch	file:
_data	sdk/src/hal/thread.h	/^    void * _data;$/;"	m	class:rp::hal::Thread
_dataEvt	sdk/src/rplidar_driver_impl.h	/^    rp::hal::Event          _dataEvt;$/;"	m	class:rp::standalone::rplidar::RPlidarDriverImplCommon
_dcb	sdk/src/arch/win32/net_serial.h	/^    DCB _dcb;$/;"	m	class:rp::arch::net::raw_serial
_disableDataGrabbing	sdk/src/rplidar_driver.cpp	/^void RPlidarDriverImplCommon::_disableDataGrabbing()$/;"	f	class:rp::standalone::rplidar::RPlidarDriverImplCommon
_event	sdk/src/hal/event.h	/^        HANDLE _event;$/;"	m	class:rp::hal::Event
_flags	sdk/src/arch/linux/net_serial.h	/^    uint32_t _flags;$/;"	m	class:rp::arch::net::raw_serial
_flags	sdk/src/arch/macOS/net_serial.h	/^    uint32_t _flags;$/;"	m	class:rp::arch::net::raw_serial
_flags	sdk/src/arch/win32/net_serial.h	/^    uint32_t _flags;$/;"	m	class:rp::arch::net::raw_serial
_func	sdk/src/hal/thread.h	/^    thread_proc_t _func;$/;"	m	class:rp::hal::Thread
_halAddrTypeToOSType	sdk/src/arch/linux/net_socket.cpp	/^static inline int _halAddrTypeToOSType(SocketAddress::address_type_t type) $/;"	f	namespace:rp::net
_halAddrTypeToOSType	sdk/src/arch/macOS/net_socket.cpp	/^static inline int _halAddrTypeToOSType(SocketAddress::address_type_t type) $/;"	f	namespace:rp::net
_halAddrTypeToOSType	sdk/src/arch/win32/net_socket.cpp	/^static inline int _halAddrTypeToOSType(SocketAddress::address_type_t type) $/;"	f	namespace:rp::net
_handle	sdk/src/hal/thread.h	/^    _word_size_t _handle;$/;"	m	class:rp::hal::Thread
_inet_ntop	sdk/src/arch/win32/net_socket.cpp	/^static const char* _inet_ntop(int af, const void* src, char* dst, int cnt){$/;"	f	namespace:rp::net
_inet_pton	sdk/src/arch/win32/net_socket.cpp	/^static int _inet_pton(int Family, const char * pszAddrString, void* pAddrBuf)$/;"	f	namespace:rp::net
_init	sdk/src/arch/linux/net_serial.cpp	/^void raw_serial::_init()$/;"	f	class:rp::arch::net::raw_serial
_init	sdk/src/arch/macOS/net_serial.cpp	/^void raw_serial::_init()$/;"	f	class:rp::arch::net::raw_serial
_init	sdk/src/arch/win32/net_serial.cpp	/^void raw_serial::_init()$/;"	f	class:rp::arch::net::raw_serial
_isAutoReset	sdk/src/hal/event.h	/^        bool                   _isAutoReset;$/;"	m	class:rp::hal::Event
_isConnected	sdk/src/rplidar_driver_impl.h	/^    bool     _isConnected; $/;"	m	class:rp::standalone::rplidar::RPlidarDriverImplCommon
_isScanning	sdk/src/rplidar_driver_impl.h	/^    bool     _isScanning;$/;"	m	class:rp::standalone::rplidar::RPlidarDriverImplCommon
_isSupportingMotorCtrl	sdk/src/rplidar_driver_impl.h	/^    bool     _isSupportingMotorCtrl;$/;"	m	class:rp::standalone::rplidar::RPlidarDriverImplCommon
_isWSAStartupCalled	sdk/src/arch/win32/net_socket.cpp	/^static volatile bool _isWSAStartupCalled = false;$/;"	m	namespace:rp::net	file:
_is_previous_HqdataRdy	sdk/src/rplidar_driver_impl.h	/^    bool                                         _is_previous_HqdataRdy;$/;"	m	class:rp::standalone::rplidar::RPlidarDriverImplCommon
_is_previous_capsuledataRdy	sdk/src/rplidar_driver_impl.h	/^    bool                                         _is_previous_capsuledataRdy;$/;"	m	class:rp::standalone::rplidar::RPlidarDriverImplCommon
_is_serial_opened	sdk/src/hal/abs_rxtx.h	/^    volatile bool   _is_serial_opened;$/;"	m	class:rp::hal::serial_rxtx
_is_signalled	sdk/src/hal/event.h	/^        bool                   _is_signalled;$/;"	m	class:rp::hal::Event
_lock	sdk/src/hal/locker.h	/^    HANDLE  _lock;$/;"	m	class:rp::hal::Locker
_lock	sdk/src/hal/locker.h	/^    pthread_mutex_t _lock;$/;"	m	class:rp::hal::Locker
_lock	sdk/src/rplidar_driver_impl.h	/^    rp::hal::Locker         _lock;$/;"	m	class:rp::standalone::rplidar::RPlidarDriverImplCommon
_multi_thread	sdk/src/hal/types.h	83;"	d
_operation_aborted	sdk/src/arch/linux/net_serial.h	/^    bool   _operation_aborted;$/;"	m	class:rp::arch::net::raw_serial
_platform_data	sdk/src/hal/socket.h	/^    void * _platform_data;$/;"	m	class:rp::net::SocketAddress
_portName	sdk/src/arch/linux/net_serial.h	/^    char _portName[200];$/;"	m	class:rp::arch::net::raw_serial
_portName	sdk/src/arch/macOS/net_serial.h	/^    char _portName[200];$/;"	m	class:rp::arch::net::raw_serial
_portName	sdk/src/arch/win32/net_serial.h	/^    char _portName[20];$/;"	m	class:rp::arch::net::raw_serial
_ro	sdk/src/arch/win32/net_serial.h	/^    OVERLAPPED _ro, _wo;$/;"	m	class:rp::arch::net::raw_serial
_rplidar_ans_header_t	sdk/include/rplidar_protocol.h	/^typedef struct _rplidar_ans_header_t {$/;"	s
_rplidar_cmd_packet_t	sdk/include/rplidar_protocol.h	/^typedef struct _rplidar_cmd_packet_t {$/;"	s
_rplidar_payload_acc_board_flag_t	sdk/include/rplidar_cmd.h	/^typedef struct _rplidar_payload_acc_board_flag_t {$/;"	s
_rplidar_payload_express_scan_t	sdk/include/rplidar_cmd.h	/^typedef struct _rplidar_payload_express_scan_t {$/;"	s
_rplidar_payload_get_scan_conf_t	sdk/include/rplidar_cmd.h	/^typedef struct _rplidar_payload_get_scan_conf_t {$/;"	s
_rplidar_payload_hq_scan_t	sdk/include/rplidar_cmd.h	/^typedef struct _rplidar_payload_hq_scan_t {$/;"	s
_rplidar_payload_motor_pwm_t	sdk/include/rplidar_cmd.h	/^typedef struct _rplidar_payload_motor_pwm_t {$/;"	s
_rplidar_response_acc_board_flag_t	sdk/include/rplidar_cmd.h	/^typedef struct _rplidar_response_acc_board_flag_t {$/;"	s
_rplidar_response_cabin_nodes_t	sdk/include/rplidar_cmd.h	/^typedef struct _rplidar_response_cabin_nodes_t {$/;"	s
_rplidar_response_capsule_measurement_nodes_t	sdk/include/rplidar_cmd.h	/^typedef struct _rplidar_response_capsule_measurement_nodes_t {$/;"	s
_rplidar_response_device_health_t	sdk/include/rplidar_cmd.h	/^typedef struct _rplidar_response_device_health_t {$/;"	s
_rplidar_response_device_info_t	sdk/include/rplidar_cmd.h	/^typedef struct _rplidar_response_device_info_t {$/;"	s
_rplidar_response_get_lidar_conf	sdk/include/rplidar_cmd.h	/^typedef struct _rplidar_response_get_lidar_conf{$/;"	s
_rplidar_response_hq_capsule_measurement_nodes_t	sdk/include/rplidar_cmd.h	/^typedef struct _rplidar_response_hq_capsule_measurement_nodes_t{$/;"	s
_rplidar_response_measurement_node_t	sdk/include/rplidar_cmd.h	/^typedef struct _rplidar_response_measurement_node_t {$/;"	s
_rplidar_response_sample_rate_t	sdk/include/rplidar_cmd.h	/^typedef struct _rplidar_response_sample_rate_t {$/;"	s
_rplidar_response_set_lidar_conf	sdk/include/rplidar_cmd.h	/^typedef struct _rplidar_response_set_lidar_conf{$/;"	s
_rplidar_response_ultra_cabin_nodes_t	sdk/include/rplidar_cmd.h	/^typedef struct _rplidar_response_ultra_cabin_nodes_t {$/;"	s
_rplidar_response_ultra_capsule_measurement_nodes_t	sdk/include/rplidar_cmd.h	/^typedef struct _rplidar_response_ultra_capsule_measurement_nodes_t {$/;"	s
_rxtxSerial	sdk/src/rplidar_driver_serial.h	/^    rp::hal::serial_rxtx  * _rxtxSerial;$/;"	m	class:rp::standalone::rplidar::SerialChannelDevice
_s16	sdk/include/rptypes.h	/^typedef int16_t        _s16;$/;"	t
_s16	sdk/src/hal/types.h	/^typedef int16_t        _s16;$/;"	t
_s32	sdk/include/rptypes.h	/^typedef int32_t        _s32;$/;"	t
_s32	sdk/src/hal/types.h	/^typedef int32_t        _s32;$/;"	t
_s64	sdk/include/rptypes.h	/^typedef int64_t        _s64;$/;"	t
_s64	sdk/src/hal/types.h	/^typedef int64_t        _s64;$/;"	t
_s8	sdk/include/rptypes.h	/^typedef int8_t         _s8;$/;"	t
_s8	sdk/src/hal/types.h	/^typedef int8_t         _s8;$/;"	t
_selfpipe	sdk/src/arch/linux/net_serial.h	/^    int    _selfpipe[2];$/;"	m	class:rp::arch::net::raw_serial
_sendCommand	sdk/src/rplidar_driver.cpp	/^u_result RPlidarDriverImplCommon::_sendCommand(_u8 cmd, const void * payload, size_t payloadsize)$/;"	f	class:rp::standalone::rplidar::RPlidarDriverImplCommon
_serial_handle	sdk/src/arch/win32/net_serial.h	/^    volatile HANDLE _serial_handle;$/;"	m	class:rp::arch::net::raw_serial
_single_thread	sdk/src/hal/types.h	84;"	d
_socketHalFamilyToOSFamily	sdk/src/arch/linux/net_socket.cpp	/^static inline int _socketHalFamilyToOSFamily(SocketBase::socket_family_t family)$/;"	f	namespace:rp::net
_socketHalFamilyToOSFamily	sdk/src/arch/macOS/net_socket.cpp	/^static inline int _socketHalFamilyToOSFamily(SocketBase::socket_family_t family)$/;"	f	namespace:rp::net
_socketHalFamilyToOSFamily	sdk/src/arch/win32/net_socket.cpp	/^static inline int _socketHalFamilyToOSFamily(SocketBase::socket_family_t family)$/;"	f	namespace:rp::net
_socket_fd	sdk/src/arch/linux/net_socket.cpp	/^    int  _socket_fd;$/;"	m	class:rp::arch::net::DGramSocketImpl	file:
_socket_fd	sdk/src/arch/linux/net_socket.cpp	/^    int  _socket_fd;$/;"	m	class:rp::arch::net::StreamSocketImpl	file:
_socket_fd	sdk/src/arch/macOS/net_socket.cpp	/^    int  _socket_fd;$/;"	m	class:rp::arch::net::DGramSocketImpl	file:
_socket_fd	sdk/src/arch/macOS/net_socket.cpp	/^    int  _socket_fd;$/;"	m	class:rp::arch::net::StreamSocketImpl	file:
_socket_fd	sdk/src/arch/win32/net_socket.cpp	/^    SOCKET  _socket_fd;$/;"	m	class:rp::arch::net::DGramSocketImpl	file:
_socket_fd	sdk/src/arch/win32/net_socket.cpp	/^    SOCKET  _socket_fd;$/;"	m	class:rp::arch::net::StreamSocketImpl	file:
_thread_thunk	sdk/src/hal/thread.h	/^	static _word_size_t THREAD_PROC _thread_thunk(void * data)$/;"	f	class:rp::hal::Thread
_u16	sdk/include/rptypes.h	/^typedef uint16_t       _u16;$/;"	t
_u16	sdk/src/hal/types.h	/^typedef uint16_t       _u16;$/;"	t
_u32	sdk/include/rptypes.h	/^typedef uint32_t       _u32;$/;"	t
_u32	sdk/src/hal/types.h	/^typedef uint32_t       _u32;$/;"	t
_u64	sdk/include/rptypes.h	/^typedef uint64_t       _u64;$/;"	t
_u64	sdk/src/hal/types.h	/^typedef uint64_t       _u64;$/;"	t
_u8	sdk/include/rptypes.h	/^typedef uint8_t        _u8;$/;"	t
_u8	sdk/src/hal/types.h	/^typedef uint8_t        _u8;$/;"	t
_ultraCapsuleToNormal	sdk/src/rplidar_driver.cpp	/^void RPlidarDriverImplCommon::_ultraCapsuleToNormal(const rplidar_response_ultra_capsule_measurement_nodes_t & capsule, rplidar_response_measurement_node_hq_t *nodebuffer, size_t &nodeCount)$/;"	f	class:rp::standalone::rplidar::RPlidarDriverImplCommon
_varbitscale_decode	sdk/src/rplidar_driver.cpp	/^static _u32 _varbitscale_decode(_u32 scaled, _u32 & scaleLevel)$/;"	f	namespace:rp::standalone::rplidar
_waitCapsuledNode	sdk/src/rplidar_driver.cpp	/^u_result RPlidarDriverImplCommon::_waitCapsuledNode(rplidar_response_capsule_measurement_nodes_t & node, _u32 timeout)$/;"	f	class:rp::standalone::rplidar::RPlidarDriverImplCommon
_waitHqNode	sdk/src/rplidar_driver.cpp	/^u_result RPlidarDriverImplCommon::_waitHqNode(rplidar_response_hq_capsule_measurement_nodes_t & node, _u32 timeout)$/;"	f	class:rp::standalone::rplidar::RPlidarDriverImplCommon
_waitNode	sdk/src/rplidar_driver.cpp	/^u_result RPlidarDriverImplCommon::_waitNode(rplidar_response_measurement_node_t * node, _u32 timeout)$/;"	f	class:rp::standalone::rplidar::RPlidarDriverImplCommon
_waitResponseHeader	sdk/src/rplidar_driver.cpp	/^u_result RPlidarDriverImplCommon::_waitResponseHeader(rplidar_ans_header_t * header, _u32 timeout)$/;"	f	class:rp::standalone::rplidar::RPlidarDriverImplCommon
_waitScanData	sdk/src/rplidar_driver.cpp	/^u_result RPlidarDriverImplCommon::_waitScanData(rplidar_response_measurement_node_t * nodebuffer, size_t & count, _u32 timeout)$/;"	f	class:rp::standalone::rplidar::RPlidarDriverImplCommon
_waitUltraCapsuledNode	sdk/src/rplidar_driver.cpp	/^u_result RPlidarDriverImplCommon::_waitUltraCapsuledNode(rplidar_response_ultra_capsule_measurement_nodes_t & node, _u32 timeout)$/;"	f	class:rp::standalone::rplidar::RPlidarDriverImplCommon
_wait_o	sdk/src/arch/win32/net_serial.h	/^    OVERLAPPED _wait_o;$/;"	m	class:rp::arch::net::raw_serial
_wo	sdk/src/arch/win32/net_serial.h	/^    OVERLAPPED _ro, _wo;$/;"	m	class:rp::arch::net::raw_serial
_word_size_t	sdk/include/rptypes.h	/^typedef _u32            _word_size_t;$/;"	t
_word_size_t	sdk/include/rptypes.h	/^typedef _u32           _word_size_t;$/;"	t
_word_size_t	sdk/include/rptypes.h	/^typedef _u64           _word_size_t;$/;"	t
_word_size_t	sdk/include/rptypes.h	/^typedef _u8            _word_size_t;$/;"	t
_word_size_t	sdk/include/rptypes.h	/^typedef unsigned long  _word_size_t;$/;"	t
_word_size_t	sdk/src/hal/types.h	/^typedef _u32            _word_size_t;$/;"	t
_word_size_t	sdk/src/hal/types.h	/^typedef _u32           _word_size_t;$/;"	t
_word_size_t	sdk/src/hal/types.h	/^typedef _u64           _word_size_t;$/;"	t
_word_size_t	sdk/src/hal/types.h	/^typedef _u8            _word_size_t;$/;"	t
_word_size_t	sdk/src/hal/types.h	/^typedef unsigned long  _word_size_t;$/;"	t
accept	sdk/src/arch/linux/net_socket.cpp	/^    virtual StreamSocket * accept(SocketAddress * pairAddress) $/;"	f	class:rp::arch::net::StreamSocketImpl
accept	sdk/src/arch/macOS/net_socket.cpp	/^    virtual StreamSocket * accept(SocketAddress * pairAddress) $/;"	f	class:rp::arch::net::StreamSocketImpl
accept	sdk/src/arch/win32/net_socket.cpp	/^    virtual StreamSocket * accept(SocketAddress * pairAddress) $/;"	f	class:rp::arch::net::StreamSocketImpl
address_type_t	sdk/src/hal/socket.h	/^    enum address_type_t {$/;"	g	class:rp::net::SocketAddress
angleLessThan	sdk/src/rplidar_driver.cpp	/^static bool angleLessThan(const TNode& a, const TNode& b)$/;"	f	namespace:rp::standalone::rplidar
angle_q6_checkbit	sdk/include/rplidar_cmd.h	/^    _u16   angle_q6_checkbit; \/\/ check_bit:1;angle_q6:15;$/;"	m	struct:_rplidar_response_measurement_node_t
angle_z_q14	sdk/include/rplidar_cmd.h	/^    _u16   angle_z_q14; $/;"	m	struct:rplidar_response_measurement_node_hq_t
ans_type	sdk/include/rplidar_driver.h	/^    _u8     ans_type;         \/\/ the answer type of the scam mode, its value should be RPLIDAR_ANS_TYPE_MEASUREMENT*$/;"	m	struct:rp::standalone::rplidar::RplidarScanMode
arch	sdk/src/arch/linux/net_serial.cpp	/^namespace rp{ namespace arch{ namespace net{$/;"	n	namespace:rp	file:
arch	sdk/src/arch/linux/net_serial.h	/^namespace rp{ namespace arch{ namespace net{$/;"	n	namespace:rp
arch	sdk/src/arch/linux/net_socket.cpp	/^namespace rp { namespace arch { namespace net{ $/;"	n	namespace:rp	file:
arch	sdk/src/arch/linux/timer.cpp	/^namespace rp{ namespace arch{$/;"	n	namespace:rp	file:
arch	sdk/src/arch/linux/timer.h	/^namespace rp{ namespace arch{$/;"	n	namespace:rp
arch	sdk/src/arch/macOS/net_serial.cpp	/^namespace rp{ namespace arch{ namespace net{$/;"	n	namespace:rp	file:
arch	sdk/src/arch/macOS/net_serial.h	/^namespace rp{ namespace arch{ namespace net{$/;"	n	namespace:rp
arch	sdk/src/arch/macOS/net_socket.cpp	/^namespace rp { namespace arch { namespace net{ $/;"	n	namespace:rp	file:
arch	sdk/src/arch/macOS/timer.cpp	/^namespace rp{ namespace arch{$/;"	n	namespace:rp	file:
arch	sdk/src/arch/macOS/timer.h	/^namespace rp{ namespace arch{$/;"	n	namespace:rp
arch	sdk/src/arch/win32/net_serial.cpp	/^namespace rp{ namespace arch{ namespace net{$/;"	n	namespace:rp	file:
arch	sdk/src/arch/win32/net_serial.h	/^namespace rp{ namespace arch{ namespace net{$/;"	n	namespace:rp
arch	sdk/src/arch/win32/net_socket.cpp	/^namespace rp { namespace arch { namespace net{ $/;"	n	namespace:rp	file:
arch	sdk/src/arch/win32/timer.cpp	/^namespace rp{ namespace arch{$/;"	n	namespace:rp	file:
arch	sdk/src/arch/win32/timer.h	/^namespace rp{ namespace arch{$/;"	n	namespace:rp
ascendScanData	sdk/src/rplidar_driver.cpp	/^u_result RPlidarDriverImplCommon::ascendScanData(rplidar_response_measurement_node_hq_t * nodebuffer, size_t count)$/;"	f	class:rp::standalone::rplidar::RPlidarDriverImplCommon
ascendScanData	sdk/src/rplidar_driver.cpp	/^u_result RPlidarDriverImplCommon::ascendScanData(rplidar_response_measurement_node_t * nodebuffer, size_t count)$/;"	f	class:rp::standalone::rplidar::RPlidarDriverImplCommon
ascendScanData_	sdk/src/rplidar_driver.cpp	/^static u_result ascendScanData_(TNode * nodebuffer, size_t count)$/;"	f	namespace:rp::standalone::rplidar
assert	sdk/src/hal/assert.h	10;"	d
assert	sdk/src/hal/assert.h	13;"	d
assert	sdk/src/hal/assert.h	7;"	d
bind	sdk/src/arch/linux/net_serial.cpp	/^bool raw_serial::bind(const char * portname, uint32_t baudrate, uint32_t flags)$/;"	f	class:rp::arch::net::raw_serial
bind	sdk/src/arch/linux/net_socket.cpp	/^    virtual u_result bind(const SocketAddress & localaddr)$/;"	f	class:rp::arch::net::DGramSocketImpl
bind	sdk/src/arch/linux/net_socket.cpp	/^    virtual u_result bind(const SocketAddress & localaddr)$/;"	f	class:rp::arch::net::StreamSocketImpl
bind	sdk/src/arch/macOS/net_serial.cpp	/^bool raw_serial::bind(const char * portname, uint32_t baudrate, uint32_t flags)$/;"	f	class:rp::arch::net::raw_serial
bind	sdk/src/arch/macOS/net_socket.cpp	/^    virtual u_result bind(const SocketAddress & localaddr)$/;"	f	class:rp::arch::net::DGramSocketImpl
bind	sdk/src/arch/macOS/net_socket.cpp	/^    virtual u_result bind(const SocketAddress & localaddr)$/;"	f	class:rp::arch::net::StreamSocketImpl
bind	sdk/src/arch/win32/net_serial.cpp	/^bool raw_serial::bind(const char * portname, _u32 baudrate, _u32 flags)$/;"	f	class:rp::arch::net::raw_serial
bind	sdk/src/arch/win32/net_socket.cpp	/^    virtual u_result bind(const SocketAddress & localaddr)$/;"	f	class:rp::arch::net::DGramSocketImpl
bind	sdk/src/arch/win32/net_socket.cpp	/^    virtual u_result bind(const SocketAddress & localaddr)$/;"	f	class:rp::arch::net::StreamSocketImpl
bind	sdk/src/rplidar_driver_TCP.h	/^    bool bind(const char * ipStr, uint32_t port)$/;"	f	class:rp::standalone::rplidar::TCPChannelDevice
bind	sdk/src/rplidar_driver_serial.h	/^    bool bind(const char * portname, uint32_t baudrate)$/;"	f	class:rp::standalone::rplidar::SerialChannelDevice
cabins	sdk/include/rplidar_cmd.h	/^    rplidar_response_cabin_nodes_t  cabins[16];$/;"	m	struct:_rplidar_response_capsule_measurement_nodes_t
cancelOperation	sdk/src/arch/linux/net_serial.cpp	/^void raw_serial::cancelOperation()$/;"	f	class:rp::arch::net::raw_serial
cancelOperation	sdk/src/hal/abs_rxtx.h	/^    virtual void cancelOperation() {}$/;"	f	class:rp::hal::serial_rxtx
checkExpressScanSupported	sdk/src/rplidar_driver.cpp	/^u_result RPlidarDriverImplCommon::checkExpressScanSupported(bool & support, _u32 timeout)$/;"	f	class:rp::standalone::rplidar::RPlidarDriverImplCommon
checkMotorCtrlSupport	sdk/src/rplidar_driver.cpp	/^u_result RPlidarDriverImplCommon::checkMotorCtrlSupport(bool & support, _u32 timeout)$/;"	f	class:rp::standalone::rplidar::RPlidarDriverImplCommon
checkRPLIDARHealth	src/node.cpp	/^bool checkRPLIDARHealth(RPlidarDriver * drv)$/;"	f
checkSupportConfigCommands	sdk/src/rplidar_driver.cpp	/^u_result RPlidarDriverImplCommon::checkSupportConfigCommands(bool& outSupport, _u32 timeoutInMs)$/;"	f	class:rp::standalone::rplidar::RPlidarDriverImplCommon
clearDTR	sdk/include/rplidar_driver.h	/^    virtual void clearDTR() {return;}$/;"	f	class:rp::standalone::rplidar::ChannelDevice
clearDTR	sdk/src/arch/linux/net_serial.cpp	/^void raw_serial::clearDTR()$/;"	f	class:rp::arch::net::raw_serial
clearDTR	sdk/src/arch/macOS/net_serial.cpp	/^void raw_serial::clearDTR()$/;"	f	class:rp::arch::net::raw_serial
clearDTR	sdk/src/arch/win32/net_serial.cpp	/^void raw_serial::clearDTR()$/;"	f	class:rp::arch::net::raw_serial
clearDTR	sdk/src/rplidar_driver_serial.h	/^    void clearDTR()$/;"	f	class:rp::standalone::rplidar::SerialChannelDevice
close	sdk/src/arch/linux/net_serial.cpp	/^void raw_serial::close()$/;"	f	class:rp::arch::net::raw_serial
close	sdk/src/arch/macOS/net_serial.cpp	/^void raw_serial::close()$/;"	f	class:rp::arch::net::raw_serial
close	sdk/src/arch/win32/net_serial.cpp	/^void raw_serial::close()$/;"	f	class:rp::arch::net::raw_serial
close	sdk/src/rplidar_driver_TCP.h	/^    void close()$/;"	f	class:rp::standalone::rplidar::TCPChannelDevice
close	sdk/src/rplidar_driver_serial.h	/^    void close()$/;"	f	class:rp::standalone::rplidar::SerialChannelDevice
cmd_flag	sdk/include/rplidar_protocol.h	/^    _u8 cmd_flag; $/;"	m	struct:_rplidar_cmd_packet_t
combined_x3	sdk/include/rplidar_cmd.h	/^    _u32 combined_x3;$/;"	m	struct:_rplidar_response_ultra_cabin_nodes_t
connect	sdk/src/arch/linux/net_socket.cpp	/^    virtual u_result connect(const SocketAddress & pairAddress)$/;"	f	class:rp::arch::net::StreamSocketImpl
connect	sdk/src/arch/macOS/net_socket.cpp	/^    virtual u_result connect(const SocketAddress & pairAddress)$/;"	f	class:rp::arch::net::StreamSocketImpl
connect	sdk/src/arch/win32/net_socket.cpp	/^    virtual u_result connect(const SocketAddress & pairAddress)$/;"	f	class:rp::arch::net::StreamSocketImpl
connect	sdk/src/rplidar_driver.cpp	/^u_result RPlidarDriverSerial::connect(const char * port_path, _u32 baudrate, _u32 flag)$/;"	f	class:rp::standalone::rplidar::RPlidarDriverSerial
connect	sdk/src/rplidar_driver.cpp	/^u_result RPlidarDriverTCP::connect(const char * ipStr, _u32 port, _u32 flag)$/;"	f	class:rp::standalone::rplidar::RPlidarDriverTCP
convert	sdk/src/rplidar_driver.cpp	/^static void convert(const rplidar_response_measurement_node_hq_t& from, rplidar_response_measurement_node_t& to)$/;"	f	namespace:rp::standalone::rplidar
convert	sdk/src/rplidar_driver.cpp	/^static void convert(const rplidar_response_measurement_node_t& from, rplidar_response_measurement_node_hq_t& to)$/;"	f	namespace:rp::standalone::rplidar
crc32	sdk/include/rplidar_cmd.h	/^    _u32  crc32;$/;"	m	struct:_rplidar_response_hq_capsule_measurement_nodes_t
create	sdk/src/arch/linux/thread.hpp	/^Thread Thread::create(thread_proc_t proc, void * data)$/;"	f	class:rp::hal::Thread
create	sdk/src/arch/macOS/thread.hpp	/^Thread Thread::create(thread_proc_t proc, void * data)$/;"	f	class:rp::hal::Thread
create	sdk/src/arch/win32/winthread.hpp	/^Thread Thread::create(thread_proc_t proc, void * data)$/;"	f	class:rp::hal::Thread
create_member	sdk/src/hal/thread.h	/^    static Thread create_member(T * pthis)$/;"	f	class:rp::hal::Thread
data	sdk/include/rplidar_protocol.h	/^    _u8 data[0];$/;"	m	struct:_rplidar_cmd_packet_t
delay	sdk/src/arch/linux/timer.h	/^static inline void delay(_word_size_t ms){$/;"	f
delay	sdk/src/arch/macOS/timer.h	/^static inline void delay(_word_size_t ms){$/;"	f
delay	sdk/src/arch/win32/timer.h	39;"	d
disconnect	sdk/src/rplidar_driver.cpp	/^void RPlidarDriverSerial::disconnect()$/;"	f	class:rp::standalone::rplidar::RPlidarDriverSerial
disconnect	sdk/src/rplidar_driver.cpp	/^void RPlidarDriverTCP::disconnect()$/;"	f	class:rp::standalone::rplidar::RPlidarDriverTCP
dispose	sdk/src/arch/linux/net_socket.cpp	/^    virtual void dispose()$/;"	f	class:rp::arch::net::DGramSocketImpl
dispose	sdk/src/arch/linux/net_socket.cpp	/^    virtual void dispose()$/;"	f	class:rp::arch::net::StreamSocketImpl
dispose	sdk/src/arch/macOS/net_socket.cpp	/^    virtual void dispose()$/;"	f	class:rp::arch::net::DGramSocketImpl
dispose	sdk/src/arch/macOS/net_socket.cpp	/^    virtual void dispose()$/;"	f	class:rp::arch::net::StreamSocketImpl
dispose	sdk/src/arch/win32/net_socket.cpp	/^    virtual void dispose()$/;"	f	class:rp::arch::net::DGramSocketImpl
dispose	sdk/src/arch/win32/net_socket.cpp	/^    virtual void dispose()$/;"	f	class:rp::arch::net::StreamSocketImpl
dist_mm_q2	sdk/include/rplidar_cmd.h	/^    _u32   dist_mm_q2; $/;"	m	struct:rplidar_response_measurement_node_hq_t
distance_angle_1	sdk/include/rplidar_cmd.h	/^    _u16   distance_angle_1; \/\/ see [distance_sync flags]$/;"	m	struct:_rplidar_response_cabin_nodes_t
distance_angle_2	sdk/include/rplidar_cmd.h	/^    _u16   distance_angle_2; \/\/ see [distance_sync flags]$/;"	m	struct:_rplidar_response_cabin_nodes_t
distance_q2	sdk/include/rplidar_cmd.h	/^    _u16   distance_q2;$/;"	m	struct:_rplidar_response_measurement_node_t
enableKeepAlive	sdk/src/arch/linux/net_socket.cpp	/^    virtual u_result enableKeepAlive(bool enable)$/;"	f	class:rp::arch::net::StreamSocketImpl
enableKeepAlive	sdk/src/arch/macOS/net_socket.cpp	/^    virtual u_result enableKeepAlive(bool enable)$/;"	f	class:rp::arch::net::StreamSocketImpl
enableKeepAlive	sdk/src/arch/win32/net_socket.cpp	/^    virtual u_result enableKeepAlive(bool enable)$/;"	f	class:rp::arch::net::StreamSocketImpl
enableNoDelay	sdk/src/arch/linux/net_socket.cpp	/^    virtual u_result enableNoDelay(bool enable ) $/;"	f	class:rp::arch::net::StreamSocketImpl
enableNoDelay	sdk/src/arch/macOS/net_socket.cpp	/^    virtual u_result enableNoDelay(bool enable ) $/;"	f	class:rp::arch::net::StreamSocketImpl
enableNoDelay	sdk/src/arch/win32/net_socket.cpp	/^    virtual u_result enableNoDelay(bool enable ) $/;"	f	class:rp::arch::net::StreamSocketImpl
error_code	sdk/include/rplidar_cmd.h	/^    _u16  error_code;$/;"	m	struct:_rplidar_response_device_health_t
express_sample_duration_us	sdk/include/rplidar_cmd.h	/^    _u16  express_sample_duration_us;$/;"	m	struct:_rplidar_response_sample_rate_t
firmware_version	sdk/include/rplidar_cmd.h	/^    _u16  firmware_version;$/;"	m	struct:_rplidar_response_device_info_t
flag	sdk/include/rplidar_cmd.h	/^    _u8    flag;$/;"	m	struct:rplidar_response_measurement_node_hq_t
flag	sdk/include/rplidar_cmd.h	/^    _u8  flag;$/;"	m	struct:_rplidar_payload_hq_scan_t
flush	sdk/include/rplidar_driver.h	/^    virtual void flush() {return;}$/;"	f	class:rp::standalone::rplidar::ChannelDevice
flush	sdk/src/arch/linux/net_serial.cpp	/^void raw_serial::flush( _u32 flags)$/;"	f	class:rp::arch::net::raw_serial
flush	sdk/src/arch/macOS/net_serial.cpp	/^void raw_serial::flush( _u32 flags)$/;"	f	class:rp::arch::net::raw_serial
flush	sdk/src/arch/win32/net_serial.cpp	/^void raw_serial::flush( _u32 flags)$/;"	f	class:rp::arch::net::raw_serial
flush	sdk/src/rplidar_driver_serial.h	/^    void flush()$/;"	f	class:rp::standalone::rplidar::SerialChannelDevice
forceUnlock	sdk/src/hal/locker.h	/^    void forceUnlock() {$/;"	f	class:rp::hal::AutoLocker
getAddressAsString	sdk/src/arch/linux/net_socket.cpp	/^u_result SocketAddress::getAddressAsString(char * buffer, size_t buffersize) const$/;"	f	class:rp::net::SocketAddress
getAddressAsString	sdk/src/arch/macOS/net_socket.cpp	/^u_result SocketAddress::getAddressAsString(char * buffer, size_t buffersize) const$/;"	f	class:rp::net::SocketAddress
getAddressAsString	sdk/src/arch/win32/net_socket.cpp	/^u_result SocketAddress::getAddressAsString(char * buffer, size_t buffersize) const$/;"	f	class:rp::net::SocketAddress
getAddressType	sdk/src/arch/linux/net_socket.cpp	/^SocketAddress::address_type_t SocketAddress::getAddressType() const$/;"	f	class:rp::net::SocketAddress
getAddressType	sdk/src/arch/macOS/net_socket.cpp	/^SocketAddress::address_type_t SocketAddress::getAddressType() const$/;"	f	class:rp::net::SocketAddress
getAddressType	sdk/src/arch/win32/net_socket.cpp	/^SocketAddress::address_type_t SocketAddress::getAddressType() const$/;"	f	class:rp::net::SocketAddress
getAllSupportedScanModes	sdk/src/rplidar_driver.cpp	/^u_result RPlidarDriverImplCommon::getAllSupportedScanModes(std::vector<RplidarScanMode>& outModes, _u32 timeoutInMs)$/;"	f	class:rp::standalone::rplidar::RPlidarDriverImplCommon
getAngle	sdk/src/rplidar_driver.cpp	/^static inline float getAngle(const rplidar_response_measurement_node_hq_t& node)$/;"	f	namespace:rp::standalone::rplidar
getAngle	sdk/src/rplidar_driver.cpp	/^static inline float getAngle(const rplidar_response_measurement_node_t& node)$/;"	f	namespace:rp::standalone::rplidar
getAngle	src/node.cpp	/^static float getAngle(const rplidar_response_measurement_node_hq_t& node)$/;"	f	file:
getData	sdk/src/hal/thread.h	/^    void *getData() { return _data;}$/;"	f	class:rp::hal::Thread
getDeviceInfo	sdk/src/rplidar_driver.cpp	/^u_result RPlidarDriverImplCommon::getDeviceInfo(rplidar_response_device_info_t & info, _u32 timeout)$/;"	f	class:rp::standalone::rplidar::RPlidarDriverImplCommon
getDistanceQ2	sdk/src/rplidar_driver.cpp	/^static inline _u16 getDistanceQ2(const rplidar_response_measurement_node_t& node)$/;"	f	namespace:rp::standalone::rplidar
getDistanceQ2	sdk/src/rplidar_driver.cpp	/^static inline _u32 getDistanceQ2(const rplidar_response_measurement_node_hq_t& node)$/;"	f	namespace:rp::standalone::rplidar
getFrequency	sdk/src/rplidar_driver.cpp	/^u_result RPlidarDriverImplCommon::getFrequency(bool inExpressMode, size_t count, float & frequency, bool & is4kmode)$/;"	f	class:rp::standalone::rplidar::RPlidarDriverImplCommon
getFrequency	sdk/src/rplidar_driver.cpp	/^u_result RPlidarDriverImplCommon::getFrequency(const RplidarScanMode& scanMode, size_t count, float & frequency)$/;"	f	class:rp::standalone::rplidar::RPlidarDriverImplCommon
getHDTimer	sdk/src/arch/win32/timer.cpp	/^_u32 getHDTimer()$/;"	f	namespace:rp::arch
getHandle	sdk/src/hal/thread.h	/^    _word_size_t getHandle(){ return _handle;}$/;"	f	class:rp::hal::Thread
getHealth	sdk/src/rplidar_driver.cpp	/^u_result RPlidarDriverImplCommon::getHealth(rplidar_response_device_health_t & healthinfo, _u32 timeout)$/;"	f	class:rp::standalone::rplidar::RPlidarDriverImplCommon
getLidarConf	sdk/src/rplidar_driver.cpp	/^u_result RPlidarDriverImplCommon::getLidarConf(_u32 type, std::vector<_u8> &outputBuf, const std::vector<_u8> &reserve, _u32 timeout)$/;"	f	class:rp::standalone::rplidar::RPlidarDriverImplCommon
getLidarSampleDuration	sdk/src/rplidar_driver.cpp	/^u_result RPlidarDriverImplCommon::getLidarSampleDuration(float& sampleDurationRes, _u16 scanModeID, _u32 timeoutInMs)$/;"	f	class:rp::standalone::rplidar::RPlidarDriverImplCommon
getLocalAddress	sdk/src/arch/linux/net_socket.cpp	/^    virtual u_result getLocalAddress(SocketAddress & localaddr)$/;"	f	class:rp::arch::net::DGramSocketImpl
getLocalAddress	sdk/src/arch/linux/net_socket.cpp	/^    virtual u_result getLocalAddress(SocketAddress & localaddr)$/;"	f	class:rp::arch::net::StreamSocketImpl
getLocalAddress	sdk/src/arch/macOS/net_socket.cpp	/^    virtual u_result getLocalAddress(SocketAddress & localaddr)$/;"	f	class:rp::arch::net::DGramSocketImpl
getLocalAddress	sdk/src/arch/macOS/net_socket.cpp	/^    virtual u_result getLocalAddress(SocketAddress & localaddr)$/;"	f	class:rp::arch::net::StreamSocketImpl
getLocalAddress	sdk/src/arch/win32/net_socket.cpp	/^    virtual u_result getLocalAddress(SocketAddress & localaddr)$/;"	f	class:rp::arch::net::DGramSocketImpl
getLocalAddress	sdk/src/arch/win32/net_socket.cpp	/^    virtual u_result getLocalAddress(SocketAddress & localaddr)$/;"	f	class:rp::arch::net::StreamSocketImpl
getLockHandle	sdk/src/hal/locker.h	/^    HANDLE getLockHandle()$/;"	f	class:rp::hal::Locker
getLockHandle	sdk/src/hal/locker.h	/^    pthread_mutex_t *getLockHandle()$/;"	f	class:rp::hal::Locker
getMaxDistance	sdk/src/rplidar_driver.cpp	/^u_result RPlidarDriverImplCommon::getMaxDistance(float &maxDistance, _u16 scanModeID, _u32 timeoutInMs)$/;"	f	class:rp::standalone::rplidar::RPlidarDriverImplCommon
getPeerAddress	sdk/src/arch/linux/net_socket.cpp	/^    virtual u_result getPeerAddress(SocketAddress & peerAddr)$/;"	f	class:rp::arch::net::StreamSocketImpl
getPeerAddress	sdk/src/arch/macOS/net_socket.cpp	/^    virtual u_result getPeerAddress(SocketAddress & peerAddr)$/;"	f	class:rp::arch::net::StreamSocketImpl
getPeerAddress	sdk/src/arch/win32/net_socket.cpp	/^    virtual u_result getPeerAddress(SocketAddress & peerAddr)$/;"	f	class:rp::arch::net::StreamSocketImpl
getPlatformData	sdk/src/hal/socket.h	/^    const void * getPlatformData() const {$/;"	f	class:rp::net::SocketAddress
getPort	sdk/src/arch/linux/net_socket.cpp	/^int SocketAddress::getPort() const$/;"	f	class:rp::net::SocketAddress
getPort	sdk/src/arch/macOS/net_socket.cpp	/^int SocketAddress::getPort() const$/;"	f	class:rp::net::SocketAddress
getPort	sdk/src/arch/win32/net_socket.cpp	/^int SocketAddress::getPort() const$/;"	f	class:rp::net::SocketAddress
getPriority	sdk/src/arch/linux/thread.hpp	/^Thread::priority_val_t Thread::getPriority()$/;"	f	class:rp::hal::Thread
getPriority	sdk/src/arch/macOS/thread.hpp	/^Thread::priority_val_t Thread::getPriority()$/;"	f	class:rp::hal::Thread
getPriority	sdk/src/arch/win32/winthread.hpp	/^Thread::priority_val_t Thread::getPriority()$/;"	f	class:rp::hal::Thread
getRPLIDARDeviceInfo	src/node.cpp	/^bool getRPLIDARDeviceInfo(RPlidarDriver * drv)$/;"	f
getRawAddress	sdk/src/arch/linux/net_socket.cpp	/^u_result SocketAddress::getRawAddress(_u8 * buffer, size_t bufferSize) const$/;"	f	class:rp::net::SocketAddress
getRawAddress	sdk/src/arch/macOS/net_socket.cpp	/^u_result SocketAddress::getRawAddress(_u8 * buffer, size_t bufferSize) const$/;"	f	class:rp::net::SocketAddress
getRawAddress	sdk/src/arch/win32/net_socket.cpp	/^u_result SocketAddress::getRawAddress(_u8 * buffer, size_t bufferSize) const$/;"	f	class:rp::net::SocketAddress
getSampleDuration_uS	sdk/src/rplidar_driver.cpp	/^u_result RPlidarDriverImplCommon::getSampleDuration_uS(rplidar_response_sample_rate_t & rateInfo, _u32 timeout)$/;"	f	class:rp::standalone::rplidar::RPlidarDriverImplCommon
getScanDataWithInterval	sdk/src/rplidar_driver.cpp	/^u_result RPlidarDriverImplCommon::getScanDataWithInterval(rplidar_response_measurement_node_t * nodebuffer, size_t & count)$/;"	f	class:rp::standalone::rplidar::RPlidarDriverImplCommon
getScanDataWithIntervalHq	sdk/src/rplidar_driver.cpp	/^u_result RPlidarDriverImplCommon::getScanDataWithIntervalHq(rplidar_response_measurement_node_hq_t * nodebuffer, size_t & count)$/;"	f	class:rp::standalone::rplidar::RPlidarDriverImplCommon
getScanModeAnsType	sdk/src/rplidar_driver.cpp	/^u_result RPlidarDriverImplCommon::getScanModeAnsType(_u8 &ansType, _u16 scanModeID, _u32 timeoutInMs)$/;"	f	class:rp::standalone::rplidar::RPlidarDriverImplCommon
getScanModeCount	sdk/src/rplidar_driver.cpp	/^u_result RPlidarDriverImplCommon::getScanModeCount(_u16& modeCount, _u32 timeoutInMs)$/;"	f	class:rp::standalone::rplidar::RPlidarDriverImplCommon
getScanModeName	sdk/src/rplidar_driver.cpp	/^u_result RPlidarDriverImplCommon::getScanModeName(char* modeName, _u16 scanModeID, _u32 timeoutInMs)$/;"	f	class:rp::standalone::rplidar::RPlidarDriverImplCommon
getTermBaudBitmap	sdk/src/arch/linux/net_serial.cpp	/^_u32 raw_serial::getTermBaudBitmap(_u32 baud)$/;"	f	class:rp::arch::net::raw_serial
getTermBaudBitmap	sdk/src/arch/macOS/net_serial.cpp	/^_u32 raw_serial::getTermBaudBitmap(_u32 baud)$/;"	f	class:rp::arch::net::raw_serial
getTypicalScanMode	sdk/src/rplidar_driver.cpp	/^u_result RPlidarDriverImplCommon::getTypicalScanMode(_u16& outMode, _u32 timeoutInMs)$/;"	f	class:rp::standalone::rplidar::RPlidarDriverImplCommon
getms	sdk/src/arch/linux/timer.h	57;"	d
getms	sdk/src/arch/macOS/timer.h	57;"	d
getms	sdk/src/arch/win32/timer.h	46;"	d
getus	sdk/src/arch/macOS/timer.cpp	/^_u64 getus()$/;"	f	namespace:rp::arch
grabScanData	sdk/src/rplidar_driver.cpp	/^u_result RPlidarDriverImplCommon::grabScanData(rplidar_response_measurement_node_t * nodebuffer, size_t & count, _u32 timeout)$/;"	f	class:rp::standalone::rplidar::RPlidarDriverImplCommon
grabScanDataHq	sdk/src/rplidar_driver.cpp	/^u_result RPlidarDriverImplCommon::grabScanDataHq(rplidar_response_measurement_node_hq_t * nodebuffer, size_t & count, _u32 timeout)$/;"	f	class:rp::standalone::rplidar::RPlidarDriverImplCommon
hal	sdk/src/arch/linux/net_serial.cpp	/^namespace rp{ namespace hal{$/;"	n	namespace:rp	file:
hal	sdk/src/arch/linux/thread.hpp	/^namespace rp{ namespace hal{$/;"	n	namespace:rp
hal	sdk/src/arch/macOS/net_serial.cpp	/^namespace rp{ namespace hal{$/;"	n	namespace:rp	file:
hal	sdk/src/arch/macOS/thread.hpp	/^namespace rp{ namespace hal{$/;"	n	namespace:rp
hal	sdk/src/arch/win32/net_serial.cpp	/^namespace rp{ namespace hal{$/;"	n	namespace:rp	file:
hal	sdk/src/arch/win32/winthread.hpp	/^namespace rp{ namespace hal{$/;"	n	namespace:rp
hal	sdk/src/hal/abs_rxtx.h	/^namespace rp{ namespace hal{$/;"	n	namespace:rp
hal	sdk/src/hal/event.h	/^namespace rp{ namespace hal{$/;"	n	namespace:rp
hal	sdk/src/hal/locker.h	/^namespace rp{ namespace hal{ $/;"	n	namespace:rp
hal	sdk/src/hal/thread.h	/^namespace rp{ namespace hal{$/;"	n	namespace:rp
hardware_version	sdk/include/rplidar_cmd.h	/^    _u8   hardware_version;$/;"	m	struct:_rplidar_response_device_info_t
id	sdk/include/rplidar_driver.h	/^    _u16    id;$/;"	m	struct:rp::standalone::rplidar::RplidarScanMode
init	sdk/src/hal/locker.h	/^    void    init()$/;"	f	class:rp::hal::Locker
int16_t	sdk/include/rptypes.h	/^typedef __int16           int16_t;$/;"	t
int16_t	sdk/src/hal/types.h	/^typedef __int16           int16_t;$/;"	t
int32_t	sdk/include/rptypes.h	/^typedef __int32           int32_t;$/;"	t
int32_t	sdk/src/hal/types.h	/^typedef __int32           int32_t;$/;"	t
int64_t	sdk/include/rptypes.h	/^typedef __int64           int64_t;$/;"	t
int64_t	sdk/src/hal/types.h	/^typedef __int64           int64_t;$/;"	t
int8_t	sdk/include/rptypes.h	/^typedef signed   char     int8_t;$/;"	t
int8_t	sdk/src/hal/types.h	/^typedef signed   char     int8_t;$/;"	t
isConnected	sdk/src/rplidar_driver.cpp	/^bool RPlidarDriverImplCommon::isConnected()$/;"	f	class:rp::standalone::rplidar::RPlidarDriverImplCommon
isOpened	sdk/src/hal/abs_rxtx.h	/^    virtual bool isOpened()$/;"	f	class:rp::hal::serial_rxtx
join	sdk/src/arch/linux/thread.hpp	/^u_result Thread::join(unsigned long timeout)$/;"	f	class:rp::hal::Thread
join	sdk/src/arch/macOS/thread.hpp	/^u_result Thread::join(unsigned long timeout)$/;"	f	class:rp::hal::Thread
join	sdk/src/arch/win32/winthread.hpp	/^u_result Thread::join(unsigned long timeout)$/;"	f	class:rp::hal::Thread
listen	sdk/src/arch/linux/net_socket.cpp	/^    virtual u_result listen(int backlog)$/;"	f	class:rp::arch::net::StreamSocketImpl
listen	sdk/src/arch/macOS/net_socket.cpp	/^    virtual u_result listen(int backlog)$/;"	f	class:rp::arch::net::StreamSocketImpl
listen	sdk/src/arch/win32/net_socket.cpp	/^    virtual u_result listen(int backlog)$/;"	f	class:rp::arch::net::StreamSocketImpl
lock	sdk/src/hal/locker.h	/^    Locker::LOCK_STATUS lock(unsigned long timeout = 0xFFFFFFFF)$/;"	f	class:rp::hal::Locker
main	src/client.cpp	/^int main(int argc, char **argv)$/;"	f
main	src/myClient.cpp	/^int main(int argc, char **argv)$/;"	f
main	src/node.cpp	/^int main(int argc, char * argv[]) {$/;"	f
max_distance	sdk/include/rplidar_driver.h	/^    float   max_distance;    \/\/ max distance$/;"	m	struct:rp::standalone::rplidar::RplidarScanMode
min	sdk/src/rplidar_driver.cpp	51;"	d	file:
model	sdk/include/rplidar_cmd.h	/^    _u8   model;$/;"	m	struct:_rplidar_response_device_info_t
net	sdk/src/arch/linux/net_serial.cpp	/^namespace rp{ namespace arch{ namespace net{$/;"	n	namespace:rp::arch	file:
net	sdk/src/arch/linux/net_serial.h	/^namespace rp{ namespace arch{ namespace net{$/;"	n	namespace:rp::arch
net	sdk/src/arch/linux/net_socket.cpp	/^namespace rp { namespace arch { namespace net{ $/;"	n	namespace:rp::arch	file:
net	sdk/src/arch/linux/net_socket.cpp	/^namespace rp { namespace net{ $/;"	n	namespace:rp	file:
net	sdk/src/arch/linux/net_socket.cpp	/^namespace rp{ namespace net {$/;"	n	namespace:rp	file:
net	sdk/src/arch/macOS/net_serial.cpp	/^namespace rp{ namespace arch{ namespace net{$/;"	n	namespace:rp::arch	file:
net	sdk/src/arch/macOS/net_serial.h	/^namespace rp{ namespace arch{ namespace net{$/;"	n	namespace:rp::arch
net	sdk/src/arch/macOS/net_socket.cpp	/^namespace rp { namespace arch { namespace net{ $/;"	n	namespace:rp::arch	file:
net	sdk/src/arch/macOS/net_socket.cpp	/^namespace rp { namespace net{ $/;"	n	namespace:rp	file:
net	sdk/src/arch/macOS/net_socket.cpp	/^namespace rp{ namespace net {$/;"	n	namespace:rp	file:
net	sdk/src/arch/win32/net_serial.cpp	/^namespace rp{ namespace arch{ namespace net{$/;"	n	namespace:rp::arch	file:
net	sdk/src/arch/win32/net_serial.h	/^namespace rp{ namespace arch{ namespace net{$/;"	n	namespace:rp::arch
net	sdk/src/arch/win32/net_socket.cpp	/^namespace rp { namespace arch { namespace net{ $/;"	n	namespace:rp::arch	file:
net	sdk/src/arch/win32/net_socket.cpp	/^namespace rp { namespace net{ $/;"	n	namespace:rp	file:
net	sdk/src/arch/win32/net_socket.cpp	/^namespace rp{ namespace net {$/;"	n	namespace:rp	file:
net	sdk/src/hal/socket.h	/^namespace rp{ namespace net {$/;"	n	namespace:rp
node_hq	sdk/include/rplidar_cmd.h	/^    rplidar_response_measurement_node_hq_t node_hq[16];$/;"	m	struct:_rplidar_response_hq_capsule_measurement_nodes_t
offset_angles_q3	sdk/include/rplidar_cmd.h	/^    _u8    offset_angles_q3;  $/;"	m	struct:_rplidar_response_cabin_nodes_t
offsetof	sdk/src/hal/util.h	55;"	d
open	sdk/include/rplidar_driver.h	/^    virtual bool open() {return true;}$/;"	f	class:rp::standalone::rplidar::ChannelDevice
open	sdk/src/arch/linux/net_serial.cpp	/^bool raw_serial::open()$/;"	f	class:rp::arch::net::raw_serial
open	sdk/src/arch/linux/net_serial.cpp	/^bool raw_serial::open(const char * portname, uint32_t baudrate, uint32_t flags)$/;"	f	class:rp::arch::net::raw_serial
open	sdk/src/arch/macOS/net_serial.cpp	/^bool raw_serial::open()$/;"	f	class:rp::arch::net::raw_serial
open	sdk/src/arch/macOS/net_serial.cpp	/^bool raw_serial::open(const char * portname, uint32_t baudrate, uint32_t flags)$/;"	f	class:rp::arch::net::raw_serial
open	sdk/src/arch/win32/net_serial.cpp	/^bool raw_serial::open()$/;"	f	class:rp::arch::net::raw_serial
open	sdk/src/arch/win32/net_serial.cpp	/^bool raw_serial::open(const char * portname, _u32 baudrate, _u32 flags)$/;"	f	class:rp::arch::net::raw_serial
open	sdk/src/rplidar_driver_serial.h	/^    bool open()$/;"	f	class:rp::standalone::rplidar::SerialChannelDevice
operator =	sdk/src/arch/linux/net_socket.cpp	/^SocketAddress & SocketAddress::operator = (const SocketAddress &src)$/;"	f	class:rp::net::SocketAddress
operator =	sdk/src/arch/macOS/net_socket.cpp	/^SocketAddress & SocketAddress::operator = (const SocketAddress &src)$/;"	f	class:rp::net::SocketAddress
operator =	sdk/src/arch/win32/net_socket.cpp	/^SocketAddress & SocketAddress::operator = (const SocketAddress &src)$/;"	f	class:rp::net::SocketAddress
operator ==	sdk/src/hal/thread.h	/^    bool operator== ( const Thread & right) { return this->_handle == right._handle; }$/;"	f	class:rp::hal::Thread
param	sdk/include/rplidar_cmd.h	/^    _u16  param;$/;"	m	struct:_rplidar_payload_express_scan_t
payload	sdk/include/rplidar_cmd.h	/^    _u8  payload[0];$/;"	m	struct:_rplidar_response_get_lidar_conf
printDeprecationWarn	sdk/src/rplidar_driver.cpp	/^    static void printDeprecationWarn(const char* fn, const char* replacement)$/;"	f	namespace:rp::standalone::rplidar
priority_val_t	sdk/src/hal/thread.h	/^    enum priority_val_t$/;"	g	class:rp::hal::Thread
publish_scan	src/node.cpp	/^void publish_scan(ros::Publisher *pub,$/;"	f
pwm_value	sdk/include/rplidar_cmd.h	/^    _u16 pwm_value;$/;"	m	struct:_rplidar_payload_motor_pwm_t
quality	sdk/include/rplidar_cmd.h	/^    _u8    quality;  $/;"	m	struct:rplidar_response_measurement_node_hq_t
raw_serial	sdk/src/arch/linux/net_serial.cpp	/^raw_serial::raw_serial()$/;"	f	class:rp::arch::net::raw_serial
raw_serial	sdk/src/arch/linux/net_serial.h	/^class raw_serial : public rp::hal::serial_rxtx$/;"	c	namespace:rp::arch::net
raw_serial	sdk/src/arch/macOS/net_serial.cpp	/^raw_serial::raw_serial()$/;"	f	class:rp::arch::net::raw_serial
raw_serial	sdk/src/arch/macOS/net_serial.h	/^class raw_serial : public rp::hal::serial_rxtx$/;"	c	namespace:rp::arch::net
raw_serial	sdk/src/arch/win32/net_serial.cpp	/^raw_serial::raw_serial()$/;"	f	class:rp::arch::net::raw_serial
raw_serial	sdk/src/arch/win32/net_serial.h	/^class raw_serial : public rp::hal::serial_rxtx$/;"	c	namespace:rp::arch::net
recv	sdk/src/arch/linux/net_socket.cpp	/^    virtual u_result recv(void *buf, size_t len, size_t & recv_len)$/;"	f	class:rp::arch::net::StreamSocketImpl
recv	sdk/src/arch/macOS/net_socket.cpp	/^    virtual u_result recv(void *buf, size_t len, size_t & recv_len)$/;"	f	class:rp::arch::net::StreamSocketImpl
recv	sdk/src/arch/win32/net_socket.cpp	/^    virtual u_result recv(void *buf, size_t len, size_t & recv_len)$/;"	f	class:rp::arch::net::StreamSocketImpl
recvFrom	sdk/src/arch/linux/net_socket.cpp	/^    virtual u_result recvFrom(void *buf, size_t len, size_t & recv_len, SocketAddress * sourceAddr)$/;"	f	class:rp::arch::net::DGramSocketImpl
recvFrom	sdk/src/arch/macOS/net_socket.cpp	/^    virtual u_result recvFrom(void *buf, size_t len, size_t & recv_len, SocketAddress * sourceAddr)$/;"	f	class:rp::arch::net::DGramSocketImpl
recvFrom	sdk/src/arch/win32/net_socket.cpp	/^    virtual u_result recvFrom(void *buf, size_t len, size_t & recv_len, SocketAddress * sourceAddr)$/;"	f	class:rp::arch::net::DGramSocketImpl
recvdata	sdk/src/arch/linux/net_serial.cpp	/^int raw_serial::recvdata(unsigned char * data, size_t size)$/;"	f	class:rp::arch::net::raw_serial
recvdata	sdk/src/arch/macOS/net_serial.cpp	/^int raw_serial::recvdata(unsigned char * data, _word_size_t size)$/;"	f	class:rp::arch::net::raw_serial
recvdata	sdk/src/arch/win32/net_serial.cpp	/^int raw_serial::recvdata(unsigned char * data, size_t size)$/;"	f	class:rp::arch::net::raw_serial
recvdata	sdk/src/rplidar_driver_TCP.h	/^    int recvdata(unsigned char * data, size_t size)$/;"	f	class:rp::standalone::rplidar::TCPChannelDevice
recvdata	sdk/src/rplidar_driver_serial.h	/^    int recvdata(unsigned char * data, size_t size)$/;"	f	class:rp::standalone::rplidar::SerialChannelDevice
release	sdk/src/hal/event.h	/^    void release()$/;"	f	class:rp::hal::Event
release	sdk/src/hal/locker.h	/^    void    release()$/;"	f	class:rp::hal::Locker
required_rx_cnt	sdk/src/arch/linux/net_serial.h	/^    size_t required_rx_cnt;$/;"	m	class:rp::arch::net::raw_serial
required_rx_cnt	sdk/src/arch/macOS/net_serial.h	/^    size_t required_rx_cnt;$/;"	m	class:rp::arch::net::raw_serial
required_tx_cnt	sdk/src/arch/linux/net_serial.h	/^    size_t required_tx_cnt;$/;"	m	class:rp::arch::net::raw_serial
required_tx_cnt	sdk/src/arch/macOS/net_serial.h	/^    size_t required_tx_cnt;$/;"	m	class:rp::arch::net::raw_serial
reserved	sdk/include/rplidar_cmd.h	/^    _u32 reserved;$/;"	m	struct:_rplidar_payload_acc_board_flag_t
reserved	sdk/include/rplidar_cmd.h	/^    _u8   reserved[32];$/;"	m	struct:_rplidar_payload_get_scan_conf_t
reserved	sdk/include/rplidar_cmd.h	/^    _u8   reserved[32];$/;"	m	struct:_rplidar_payload_hq_scan_t
reset	sdk/src/rplidar_driver.cpp	/^u_result RPlidarDriverImplCommon::reset(_u32 timeout)$/;"	f	class:rp::standalone::rplidar::RPlidarDriverImplCommon
result	sdk/include/rplidar_cmd.h	/^    _u32 result;$/;"	m	struct:_rplidar_response_set_lidar_conf
rp	sdk/include/rplidar_driver.h	/^namespace rp { namespace standalone{ namespace rplidar {$/;"	n
rp	sdk/src/arch/linux/net_serial.cpp	/^namespace rp{ namespace arch{ namespace net{$/;"	n	file:
rp	sdk/src/arch/linux/net_serial.cpp	/^namespace rp{ namespace hal{$/;"	n	file:
rp	sdk/src/arch/linux/net_serial.h	/^namespace rp{ namespace arch{ namespace net{$/;"	n
rp	sdk/src/arch/linux/net_socket.cpp	/^namespace rp { namespace arch { namespace net{ $/;"	n	file:
rp	sdk/src/arch/linux/net_socket.cpp	/^namespace rp { namespace net{ $/;"	n	file:
rp	sdk/src/arch/linux/net_socket.cpp	/^namespace rp{ namespace net {$/;"	n	file:
rp	sdk/src/arch/linux/thread.hpp	/^namespace rp{ namespace hal{$/;"	n
rp	sdk/src/arch/linux/timer.cpp	/^namespace rp{ namespace arch{$/;"	n	file:
rp	sdk/src/arch/linux/timer.h	/^namespace rp{ namespace arch{$/;"	n
rp	sdk/src/arch/macOS/net_serial.cpp	/^namespace rp{ namespace arch{ namespace net{$/;"	n	file:
rp	sdk/src/arch/macOS/net_serial.cpp	/^namespace rp{ namespace hal{$/;"	n	file:
rp	sdk/src/arch/macOS/net_serial.h	/^namespace rp{ namespace arch{ namespace net{$/;"	n
rp	sdk/src/arch/macOS/net_socket.cpp	/^namespace rp { namespace arch { namespace net{ $/;"	n	file:
rp	sdk/src/arch/macOS/net_socket.cpp	/^namespace rp { namespace net{ $/;"	n	file:
rp	sdk/src/arch/macOS/net_socket.cpp	/^namespace rp{ namespace net {$/;"	n	file:
rp	sdk/src/arch/macOS/thread.hpp	/^namespace rp{ namespace hal{$/;"	n
rp	sdk/src/arch/macOS/timer.cpp	/^namespace rp{ namespace arch{$/;"	n	file:
rp	sdk/src/arch/macOS/timer.h	/^namespace rp{ namespace arch{$/;"	n
rp	sdk/src/arch/win32/net_serial.cpp	/^namespace rp{ namespace arch{ namespace net{$/;"	n	file:
rp	sdk/src/arch/win32/net_serial.cpp	/^namespace rp{ namespace hal{$/;"	n	file:
rp	sdk/src/arch/win32/net_serial.h	/^namespace rp{ namespace arch{ namespace net{$/;"	n
rp	sdk/src/arch/win32/net_socket.cpp	/^namespace rp { namespace arch { namespace net{ $/;"	n	file:
rp	sdk/src/arch/win32/net_socket.cpp	/^namespace rp { namespace net{ $/;"	n	file:
rp	sdk/src/arch/win32/net_socket.cpp	/^namespace rp{ namespace net {$/;"	n	file:
rp	sdk/src/arch/win32/timer.cpp	/^namespace rp{ namespace arch{$/;"	n	file:
rp	sdk/src/arch/win32/timer.h	/^namespace rp{ namespace arch{$/;"	n
rp	sdk/src/arch/win32/winthread.hpp	/^namespace rp{ namespace hal{$/;"	n
rp	sdk/src/hal/abs_rxtx.h	/^namespace rp{ namespace hal{$/;"	n
rp	sdk/src/hal/event.h	/^namespace rp{ namespace hal{$/;"	n
rp	sdk/src/hal/locker.h	/^namespace rp{ namespace hal{ $/;"	n
rp	sdk/src/hal/socket.h	/^namespace rp{ namespace net {$/;"	n
rp	sdk/src/hal/thread.h	/^namespace rp{ namespace hal{$/;"	n
rp	sdk/src/rplidar_driver.cpp	/^namespace rp { namespace standalone{ namespace rplidar {$/;"	n	file:
rp	sdk/src/rplidar_driver_TCP.h	/^namespace rp { namespace standalone{ namespace rplidar {$/;"	n
rp	sdk/src/rplidar_driver_impl.h	/^namespace rp { namespace standalone{ namespace rplidar {$/;"	n
rp	sdk/src/rplidar_driver_serial.h	/^namespace rp { namespace standalone{ namespace rplidar {$/;"	n
rp_getms	sdk/src/arch/linux/timer.cpp	/^_u32 rp_getms()$/;"	f	namespace:rp::arch
rp_getms	sdk/src/arch/macOS/timer.cpp	/^_u32 rp_getms()$/;"	f	namespace:rp::arch
rp_getus	sdk/src/arch/linux/timer.cpp	/^_u64 rp_getus()$/;"	f	namespace:rp::arch
rplidar	sdk/include/rplidar_driver.h	/^namespace rp { namespace standalone{ namespace rplidar {$/;"	n	namespace:rp::standalone
rplidar	sdk/src/rplidar_driver.cpp	/^namespace rp { namespace standalone{ namespace rplidar {$/;"	n	namespace:rp::standalone	file:
rplidar	sdk/src/rplidar_driver_TCP.h	/^namespace rp { namespace standalone{ namespace rplidar {$/;"	n	namespace:rp::standalone
rplidar	sdk/src/rplidar_driver_impl.h	/^namespace rp { namespace standalone{ namespace rplidar {$/;"	n	namespace:rp::standalone
rplidar	sdk/src/rplidar_driver_serial.h	/^namespace rp { namespace standalone{ namespace rplidar {$/;"	n	namespace:rp::standalone
rplidar_ans_header_t	sdk/include/rplidar_protocol.h	/^} __attribute__((packed)) rplidar_ans_header_t;$/;"	t	typeref:struct:_rplidar_ans_header_t
rplidar_cmd_packet_t	sdk/include/rplidar_protocol.h	/^} __attribute__((packed)) rplidar_cmd_packet_t;$/;"	t	typeref:struct:_rplidar_cmd_packet_t
rplidar_payload_acc_board_flag_t	sdk/include/rplidar_cmd.h	/^} __attribute__((packed)) rplidar_payload_acc_board_flag_t;$/;"	t	typeref:struct:_rplidar_payload_acc_board_flag_t
rplidar_payload_express_scan_t	sdk/include/rplidar_cmd.h	/^} __attribute__((packed)) rplidar_payload_express_scan_t;$/;"	t	typeref:struct:_rplidar_payload_express_scan_t
rplidar_payload_get_scan_conf_t	sdk/include/rplidar_cmd.h	/^} __attribute__((packed)) rplidar_payload_get_scan_conf_t;$/;"	t	typeref:struct:_rplidar_payload_get_scan_conf_t
rplidar_payload_hq_scan_t	sdk/include/rplidar_cmd.h	/^} __attribute__((packed)) rplidar_payload_hq_scan_t;$/;"	t	typeref:struct:_rplidar_payload_hq_scan_t
rplidar_payload_motor_pwm_t	sdk/include/rplidar_cmd.h	/^} __attribute__((packed)) rplidar_payload_motor_pwm_t;$/;"	t	typeref:struct:_rplidar_payload_motor_pwm_t
rplidar_response_acc_board_flag_t	sdk/include/rplidar_cmd.h	/^} __attribute__((packed)) rplidar_response_acc_board_flag_t;$/;"	t	typeref:struct:_rplidar_response_acc_board_flag_t
rplidar_response_cabin_nodes_t	sdk/include/rplidar_cmd.h	/^} __attribute__((packed)) rplidar_response_cabin_nodes_t;   $/;"	t	typeref:struct:_rplidar_response_cabin_nodes_t
rplidar_response_capsule_measurement_nodes_t	sdk/include/rplidar_cmd.h	/^} __attribute__((packed)) rplidar_response_capsule_measurement_nodes_t;$/;"	t	typeref:struct:_rplidar_response_capsule_measurement_nodes_t
rplidar_response_device_health_t	sdk/include/rplidar_cmd.h	/^} __attribute__((packed)) rplidar_response_device_health_t;$/;"	t	typeref:struct:_rplidar_response_device_health_t
rplidar_response_device_info_t	sdk/include/rplidar_cmd.h	/^} __attribute__((packed)) rplidar_response_device_info_t;$/;"	t	typeref:struct:_rplidar_response_device_info_t
rplidar_response_get_lidar_conf_t	sdk/include/rplidar_cmd.h	/^}__attribute__((packed)) rplidar_response_get_lidar_conf_t;$/;"	t	typeref:struct:_rplidar_response_get_lidar_conf
rplidar_response_hq_capsule_measurement_nodes_t	sdk/include/rplidar_cmd.h	/^}__attribute__((packed)) rplidar_response_hq_capsule_measurement_nodes_t;$/;"	t	typeref:struct:_rplidar_response_hq_capsule_measurement_nodes_t
rplidar_response_measurement_node_hq_t	sdk/include/rplidar_cmd.h	/^typedef struct rplidar_response_measurement_node_hq_t {$/;"	s
rplidar_response_measurement_node_hq_t	sdk/include/rplidar_cmd.h	/^} __attribute__((packed)) rplidar_response_measurement_node_hq_t;$/;"	t	typeref:struct:rplidar_response_measurement_node_hq_t
rplidar_response_measurement_node_t	sdk/include/rplidar_cmd.h	/^} __attribute__((packed)) rplidar_response_measurement_node_t;$/;"	t	typeref:struct:_rplidar_response_measurement_node_t
rplidar_response_sample_rate_t	sdk/include/rplidar_cmd.h	/^} __attribute__((packed)) rplidar_response_sample_rate_t;$/;"	t	typeref:struct:_rplidar_response_sample_rate_t
rplidar_response_set_lidar_conf_t	sdk/include/rplidar_cmd.h	/^}__attribute__((packed)) rplidar_response_set_lidar_conf_t;$/;"	t	typeref:struct:_rplidar_response_set_lidar_conf
rplidar_response_ultra_cabin_nodes_t	sdk/include/rplidar_cmd.h	/^} __attribute__((packed)) rplidar_response_ultra_cabin_nodes_t;  $/;"	t	typeref:struct:_rplidar_response_ultra_cabin_nodes_t
rplidar_response_ultra_capsule_measurement_nodes_t	sdk/include/rplidar_cmd.h	/^} __attribute__((packed)) rplidar_response_ultra_capsule_measurement_nodes_t;$/;"	t	typeref:struct:_rplidar_response_ultra_capsule_measurement_nodes_t
rxqueue_count	sdk/src/arch/linux/net_serial.cpp	/^size_t raw_serial::rxqueue_count()$/;"	f	class:rp::arch::net::raw_serial
rxqueue_count	sdk/src/arch/macOS/net_serial.cpp	/^size_t raw_serial::rxqueue_count()$/;"	f	class:rp::arch::net::raw_serial
rxqueue_count	sdk/src/arch/win32/net_serial.cpp	/^size_t raw_serial::rxqueue_count()$/;"	f	class:rp::arch::net::raw_serial
s_checksum_1	sdk/include/rplidar_cmd.h	/^    _u8                             s_checksum_1; \/\/ see [s_checksum_1]$/;"	m	struct:_rplidar_response_capsule_measurement_nodes_t
s_checksum_1	sdk/include/rplidar_cmd.h	/^    _u8                             s_checksum_1; \/\/ see [s_checksum_1]$/;"	m	struct:_rplidar_response_ultra_capsule_measurement_nodes_t
s_checksum_2	sdk/include/rplidar_cmd.h	/^    _u8                             s_checksum_2; \/\/ see [s_checksum_1]$/;"	m	struct:_rplidar_response_capsule_measurement_nodes_t
s_checksum_2	sdk/include/rplidar_cmd.h	/^    _u8                             s_checksum_2; \/\/ see [s_checksum_1]$/;"	m	struct:_rplidar_response_ultra_capsule_measurement_nodes_t
scanCallback	src/client.cpp	/^void scanCallback(const sensor_msgs::LaserScan::ConstPtr& scan)$/;"	f
scanCallback	src/myClient.cpp	/^void scanCallback(const sensor_msgs::LaserScan::ConstPtr& scan)$/;"	f
scan_mode	sdk/include/rplidar_driver.h	/^    char    scan_mode[64];    \/\/ name of scan mode, max 63 characters$/;"	m	struct:rp::standalone::rplidar::RplidarScanMode
send	sdk/src/arch/linux/net_socket.cpp	/^    virtual u_result send(const void * buffer, size_t len) $/;"	f	class:rp::arch::net::StreamSocketImpl
send	sdk/src/arch/macOS/net_socket.cpp	/^    virtual u_result send(const void * buffer, size_t len) $/;"	f	class:rp::arch::net::StreamSocketImpl
send	sdk/src/arch/win32/net_socket.cpp	/^    virtual u_result send(const void * buffer, size_t len) $/;"	f	class:rp::arch::net::StreamSocketImpl
sendTo	sdk/src/arch/linux/net_socket.cpp	/^    virtual u_result sendTo(const SocketAddress & target, const void * buffer, size_t len)$/;"	f	class:rp::arch::net::DGramSocketImpl
sendTo	sdk/src/arch/macOS/net_socket.cpp	/^    virtual u_result sendTo(const SocketAddress & target, const void * buffer, size_t len)$/;"	f	class:rp::arch::net::DGramSocketImpl
sendTo	sdk/src/arch/win32/net_socket.cpp	/^    virtual u_result sendTo(const SocketAddress & target, const void * buffer, size_t len)$/;"	f	class:rp::arch::net::DGramSocketImpl
senddata	sdk/src/arch/linux/net_serial.cpp	/^int raw_serial::senddata(const unsigned char * data, size_t size)$/;"	f	class:rp::arch::net::raw_serial
senddata	sdk/src/arch/macOS/net_serial.cpp	/^int raw_serial::senddata(const unsigned char * data, _word_size_t size)$/;"	f	class:rp::arch::net::raw_serial
senddata	sdk/src/arch/win32/net_serial.cpp	/^int raw_serial::senddata(const unsigned char * data, size_t size)$/;"	f	class:rp::arch::net::raw_serial
senddata	sdk/src/rplidar_driver_TCP.h	/^    int senddata(const _u8 * data, size_t size)$/;"	f	class:rp::standalone::rplidar::TCPChannelDevice
senddata	sdk/src/rplidar_driver_serial.h	/^    int senddata(const _u8 * data, size_t size)$/;"	f	class:rp::standalone::rplidar::SerialChannelDevice
serial_fd	sdk/src/arch/linux/net_serial.h	/^    int serial_fd;$/;"	m	class:rp::arch::net::raw_serial
serial_fd	sdk/src/arch/macOS/net_serial.h	/^    int serial_fd;$/;"	m	class:rp::arch::net::raw_serial
serial_rxtx	sdk/src/hal/abs_rxtx.h	/^    serial_rxtx():_is_serial_opened(false){}$/;"	f	class:rp::hal::serial_rxtx
serial_rxtx	sdk/src/hal/abs_rxtx.h	/^class serial_rxtx$/;"	c	namespace:rp::hal
serialnum	sdk/include/rplidar_cmd.h	/^    _u8   serialnum[16];$/;"	m	struct:_rplidar_response_device_info_t
set	sdk/src/hal/event.h	/^    void set( bool isSignal = true )$/;"	f	class:rp::hal::Event
setAddressFromString	sdk/src/arch/linux/net_socket.cpp	/^u_result SocketAddress::setAddressFromString(const char * address_string,  SocketAddress::address_type_t type)$/;"	f	class:rp::net::SocketAddress
setAddressFromString	sdk/src/arch/macOS/net_socket.cpp	/^u_result SocketAddress::setAddressFromString(const char * address_string,  SocketAddress::address_type_t type)$/;"	f	class:rp::net::SocketAddress
setAddressFromString	sdk/src/arch/win32/net_socket.cpp	/^u_result SocketAddress::setAddressFromString(const char * address_string,  SocketAddress::address_type_t type)$/;"	f	class:rp::net::SocketAddress
setAngle	sdk/src/rplidar_driver.cpp	/^static inline void setAngle(rplidar_response_measurement_node_hq_t& node, float v)$/;"	f	namespace:rp::standalone::rplidar
setAngle	sdk/src/rplidar_driver.cpp	/^static inline void setAngle(rplidar_response_measurement_node_t& node, float v)$/;"	f	namespace:rp::standalone::rplidar
setAnyAddress	sdk/src/arch/linux/net_socket.cpp	/^void SocketAddress::setAnyAddress(SocketAddress::address_type_t type)$/;"	f	class:rp::net::SocketAddress
setAnyAddress	sdk/src/arch/macOS/net_socket.cpp	/^void SocketAddress::setAnyAddress(SocketAddress::address_type_t type)$/;"	f	class:rp::net::SocketAddress
setAnyAddress	sdk/src/arch/win32/net_socket.cpp	/^void SocketAddress::setAnyAddress(SocketAddress::address_type_t type)$/;"	f	class:rp::net::SocketAddress
setBroadcastAddressIPv4	sdk/src/arch/linux/net_socket.cpp	/^void SocketAddress::setBroadcastAddressIPv4()$/;"	f	class:rp::net::SocketAddress
setBroadcastAddressIPv4	sdk/src/arch/macOS/net_socket.cpp	/^void SocketAddress::setBroadcastAddressIPv4()$/;"	f	class:rp::net::SocketAddress
setBroadcastAddressIPv4	sdk/src/arch/win32/net_socket.cpp	/^void SocketAddress::setBroadcastAddressIPv4()$/;"	f	class:rp::net::SocketAddress
setDTR	sdk/include/rplidar_driver.h	/^    virtual void setDTR() {return;}$/;"	f	class:rp::standalone::rplidar::ChannelDevice
setDTR	sdk/src/arch/linux/net_serial.cpp	/^void raw_serial::setDTR()$/;"	f	class:rp::arch::net::raw_serial
setDTR	sdk/src/arch/macOS/net_serial.cpp	/^void raw_serial::setDTR()$/;"	f	class:rp::arch::net::raw_serial
setDTR	sdk/src/arch/win32/net_serial.cpp	/^void raw_serial::setDTR()$/;"	f	class:rp::arch::net::raw_serial
setDTR	sdk/src/rplidar_driver_serial.h	/^    void setDTR()$/;"	f	class:rp::standalone::rplidar::SerialChannelDevice
setLoopbackAddress	sdk/src/arch/linux/net_socket.cpp	/^void SocketAddress::setLoopbackAddress(SocketAddress::address_type_t type)$/;"	f	class:rp::net::SocketAddress
setLoopbackAddress	sdk/src/arch/macOS/net_socket.cpp	/^void SocketAddress::setLoopbackAddress(SocketAddress::address_type_t type)$/;"	f	class:rp::net::SocketAddress
setLoopbackAddress	sdk/src/arch/win32/net_socket.cpp	/^void SocketAddress::setLoopbackAddress(SocketAddress::address_type_t type)$/;"	f	class:rp::net::SocketAddress
setMotorPWM	sdk/src/rplidar_driver.cpp	/^u_result RPlidarDriverImplCommon::setMotorPWM(_u16 pwm)$/;"	f	class:rp::standalone::rplidar::RPlidarDriverImplCommon
setPort	sdk/src/arch/linux/net_socket.cpp	/^u_result SocketAddress::setPort(int port)$/;"	f	class:rp::net::SocketAddress
setPort	sdk/src/arch/macOS/net_socket.cpp	/^u_result SocketAddress::setPort(int port)$/;"	f	class:rp::net::SocketAddress
setPort	sdk/src/arch/win32/net_socket.cpp	/^u_result SocketAddress::setPort(int port)$/;"	f	class:rp::net::SocketAddress
setPriority	sdk/src/arch/linux/thread.hpp	/^u_result Thread::setPriority( priority_val_t p)$/;"	f	class:rp::hal::Thread
setPriority	sdk/src/arch/macOS/thread.hpp	/^u_result Thread::setPriority( priority_val_t p)$/;"	f	class:rp::hal::Thread
setPriority	sdk/src/arch/win32/winthread.hpp	/^u_result Thread::setPriority( priority_val_t p)$/;"	f	class:rp::hal::Thread
setTimeout	sdk/src/arch/linux/net_socket.cpp	/^    virtual u_result setTimeout(_u32 timeout, socket_direction_mask msk)$/;"	f	class:rp::arch::net::DGramSocketImpl
setTimeout	sdk/src/arch/linux/net_socket.cpp	/^    virtual u_result setTimeout(_u32 timeout, socket_direction_mask msk)$/;"	f	class:rp::arch::net::StreamSocketImpl
setTimeout	sdk/src/arch/macOS/net_socket.cpp	/^    virtual u_result setTimeout(_u32 timeout, socket_direction_mask msk)$/;"	f	class:rp::arch::net::DGramSocketImpl
setTimeout	sdk/src/arch/macOS/net_socket.cpp	/^    virtual u_result setTimeout(_u32 timeout, socket_direction_mask msk)$/;"	f	class:rp::arch::net::StreamSocketImpl
setTimeout	sdk/src/arch/win32/net_socket.cpp	/^    virtual u_result setTimeout(_u32 timeout, socket_direction_mask msk)$/;"	f	class:rp::arch::net::DGramSocketImpl
setTimeout	sdk/src/arch/win32/net_socket.cpp	/^    virtual u_result setTimeout(_u32 timeout, socket_direction_mask msk)$/;"	f	class:rp::arch::net::StreamSocketImpl
shutdown	sdk/src/arch/linux/net_socket.cpp	/^    virtual u_result shutdown(socket_direction_mask mask)$/;"	f	class:rp::arch::net::StreamSocketImpl
shutdown	sdk/src/arch/macOS/net_socket.cpp	/^    virtual u_result shutdown(socket_direction_mask mask)$/;"	f	class:rp::arch::net::StreamSocketImpl
shutdown	sdk/src/arch/win32/net_socket.cpp	/^    virtual u_result shutdown(socket_direction_mask mask)$/;"	f	class:rp::arch::net::StreamSocketImpl
size	sdk/include/rplidar_protocol.h	/^    _u8 size;$/;"	m	struct:_rplidar_cmd_packet_t
size_q30_subtype	sdk/include/rplidar_protocol.h	/^    _u32 size_q30_subtype; \/\/ see _u32 size:30; _u32 subType:2;$/;"	m	struct:_rplidar_ans_header_t
socket_direction_mask	sdk/src/hal/socket.h	/^    enum socket_direction_mask {$/;"	g	class:rp::net::SocketBase
socket_family_t	sdk/src/hal/socket.h	/^    enum socket_family_t {$/;"	g	class:rp::net::SocketBase
standalone	sdk/include/rplidar_driver.h	/^namespace rp { namespace standalone{ namespace rplidar {$/;"	n	namespace:rp
standalone	sdk/src/rplidar_driver.cpp	/^namespace rp { namespace standalone{ namespace rplidar {$/;"	n	namespace:rp	file:
standalone	sdk/src/rplidar_driver_TCP.h	/^namespace rp { namespace standalone{ namespace rplidar {$/;"	n	namespace:rp
standalone	sdk/src/rplidar_driver_impl.h	/^namespace rp { namespace standalone{ namespace rplidar {$/;"	n	namespace:rp
standalone	sdk/src/rplidar_driver_serial.h	/^namespace rp { namespace standalone{ namespace rplidar {$/;"	n	namespace:rp
startMotor	sdk/src/rplidar_driver.cpp	/^u_result RPlidarDriverImplCommon::startMotor()$/;"	f	class:rp::standalone::rplidar::RPlidarDriverImplCommon
startScan	sdk/src/rplidar_driver.cpp	/^u_result RPlidarDriverImplCommon::startScan(bool force, bool useTypicalScan, _u32 options, RplidarScanMode* outUsedScanMode)$/;"	f	class:rp::standalone::rplidar::RPlidarDriverImplCommon
startScanExpress	sdk/src/rplidar_driver.cpp	/^u_result RPlidarDriverImplCommon::startScanExpress(bool force, _u16 scanMode, _u32 options, RplidarScanMode* outUsedScanMode, _u32 timeout)$/;"	f	class:rp::standalone::rplidar::RPlidarDriverImplCommon
startScanNormal	sdk/src/rplidar_driver.cpp	/^u_result RPlidarDriverImplCommon::startScanNormal(bool force,  _u32 timeout)$/;"	f	class:rp::standalone::rplidar::RPlidarDriverImplCommon
start_angle_sync_q6	sdk/include/rplidar_cmd.h	/^    _u16                            start_angle_sync_q6;$/;"	m	struct:_rplidar_response_capsule_measurement_nodes_t
start_angle_sync_q6	sdk/include/rplidar_cmd.h	/^    _u16                            start_angle_sync_q6;$/;"	m	struct:_rplidar_response_ultra_capsule_measurement_nodes_t
start_motor	src/node.cpp	/^bool start_motor(std_srvs::Empty::Request &req,$/;"	f
status	sdk/include/rplidar_cmd.h	/^    _u8   status;$/;"	m	struct:_rplidar_response_device_health_t
std_sample_duration_us	sdk/include/rplidar_cmd.h	/^    _u16  std_sample_duration_us;$/;"	m	struct:_rplidar_response_sample_rate_t
stop	sdk/src/rplidar_driver.cpp	/^u_result RPlidarDriverImplCommon::stop(_u32 timeout)$/;"	f	class:rp::standalone::rplidar::RPlidarDriverImplCommon
stopMotor	sdk/src/rplidar_driver.cpp	/^u_result RPlidarDriverImplCommon::stopMotor()$/;"	f	class:rp::standalone::rplidar::RPlidarDriverImplCommon
stop_motor	src/node.cpp	/^bool stop_motor(std_srvs::Empty::Request &req,$/;"	f
support_flag	sdk/include/rplidar_cmd.h	/^    _u32 support_flag;$/;"	m	struct:_rplidar_response_acc_board_flag_t
syncByte	sdk/include/rplidar_protocol.h	/^    _u8 syncByte; \/\/must be RPLIDAR_CMD_SYNC_BYTE$/;"	m	struct:_rplidar_cmd_packet_t
syncByte1	sdk/include/rplidar_protocol.h	/^    _u8  syncByte1; \/\/ must be RPLIDAR_ANS_SYNC_BYTE1$/;"	m	struct:_rplidar_ans_header_t
syncByte2	sdk/include/rplidar_protocol.h	/^    _u8  syncByte2; \/\/ must be RPLIDAR_ANS_SYNC_BYTE2$/;"	m	struct:_rplidar_ans_header_t
sync_byte	sdk/include/rplidar_cmd.h	/^    _u8 sync_byte;$/;"	m	struct:_rplidar_response_hq_capsule_measurement_nodes_t
sync_quality	sdk/include/rplidar_cmd.h	/^    _u8    sync_quality;      \/\/ syncbit:1;syncbit_inverse:1;quality:6;$/;"	m	struct:_rplidar_response_measurement_node_t
table	sdk/src/rplidar_driver.cpp	/^static _u32 table[256];\/\/crc32_table$/;"	m	namespace:rp::standalone::rplidar	file:
terminate	sdk/src/arch/linux/thread.hpp	/^u_result Thread::terminate()$/;"	f	class:rp::hal::Thread
terminate	sdk/src/arch/macOS/thread.hpp	/^u_result Thread::terminate()$/;"	f	class:rp::hal::Thread
terminate	sdk/src/arch/win32/winthread.hpp	/^u_result Thread::terminate()$/;"	f	class:rp::hal::Thread
thread_proc_t	sdk/include/rptypes.h	/^typedef _word_size_t (THREAD_PROC * thread_proc_t ) ( void * );$/;"	t
thread_proc_t	sdk/src/hal/types.h	/^typedef _word_size_t (THREAD_PROC * thread_proc_t ) ( void * );$/;"	t
time_stamp	sdk/include/rplidar_cmd.h	/^    _u64 time_stamp;$/;"	m	struct:_rplidar_response_hq_capsule_measurement_nodes_t
type	sdk/include/rplidar_cmd.h	/^    _u32  type;$/;"	m	struct:_rplidar_payload_get_scan_conf_t
type	sdk/include/rplidar_cmd.h	/^    _u32 type;$/;"	m	struct:_rplidar_response_get_lidar_conf
type	sdk/include/rplidar_protocol.h	/^    _u8  type;$/;"	m	struct:_rplidar_ans_header_t
u_result	sdk/include/rptypes.h	/^typedef uint32_t u_result;$/;"	t
u_result	sdk/src/hal/types.h	/^typedef uint32_t u_result;$/;"	t
uint16_t	sdk/include/rptypes.h	/^typedef unsigned __int16  uint16_t;$/;"	t
uint16_t	sdk/src/hal/types.h	/^typedef unsigned __int16  uint16_t;$/;"	t
uint32_t	sdk/include/rptypes.h	/^typedef unsigned __int32  uint32_t;$/;"	t
uint32_t	sdk/src/hal/types.h	/^typedef unsigned __int32  uint32_t;$/;"	t
uint64_t	sdk/include/rptypes.h	/^typedef unsigned __int64  uint64_t;$/;"	t
uint64_t	sdk/src/hal/types.h	/^typedef unsigned __int64  uint64_t;$/;"	t
uint8_t	sdk/include/rptypes.h	/^typedef unsigned char     uint8_t;$/;"	t
uint8_t	sdk/src/hal/types.h	/^typedef unsigned char     uint8_t;$/;"	t
ultra_cabins	sdk/include/rplidar_cmd.h	/^    rplidar_response_ultra_cabin_nodes_t  ultra_cabins[32];$/;"	m	struct:_rplidar_response_ultra_capsule_measurement_nodes_t
unlock	sdk/src/hal/locker.h	/^    void unlock()$/;"	f	class:rp::hal::Locker
us_per_sample	sdk/include/rplidar_driver.h	/^    float   us_per_sample;   \/\/ microseconds per sample$/;"	m	struct:rp::standalone::rplidar::RplidarScanMode
wait	sdk/src/hal/event.h	/^    unsigned long wait( unsigned long timeout = 0xFFFFFFFF )$/;"	f	class:rp::hal::Event
waitforData	sdk/src/arch/linux/net_socket.cpp	/^    virtual u_result waitforData(_u32 timeout )$/;"	f	class:rp::arch::net::DGramSocketImpl
waitforData	sdk/src/arch/linux/net_socket.cpp	/^    virtual u_result waitforData(_u32 timeout )$/;"	f	class:rp::arch::net::StreamSocketImpl
waitforData	sdk/src/arch/macOS/net_socket.cpp	/^    virtual u_result waitforData(_u32 timeout )$/;"	f	class:rp::arch::net::DGramSocketImpl
waitforData	sdk/src/arch/macOS/net_socket.cpp	/^    virtual u_result waitforData(_u32 timeout )$/;"	f	class:rp::arch::net::StreamSocketImpl
waitforData	sdk/src/arch/win32/net_socket.cpp	/^    virtual u_result waitforData(_u32 timeout )$/;"	f	class:rp::arch::net::DGramSocketImpl
waitforData	sdk/src/arch/win32/net_socket.cpp	/^    virtual u_result waitforData(_u32 timeout )$/;"	f	class:rp::arch::net::StreamSocketImpl
waitforIncomingConnection	sdk/src/arch/linux/net_socket.cpp	/^    virtual u_result waitforIncomingConnection(_u32 timeout)$/;"	f	class:rp::arch::net::StreamSocketImpl
waitforIncomingConnection	sdk/src/arch/macOS/net_socket.cpp	/^    virtual u_result waitforIncomingConnection(_u32 timeout)$/;"	f	class:rp::arch::net::StreamSocketImpl
waitforIncomingConnection	sdk/src/arch/win32/net_socket.cpp	/^    virtual u_result waitforIncomingConnection(_u32 timeout)$/;"	f	class:rp::arch::net::StreamSocketImpl
waitforSent	sdk/src/arch/linux/net_socket.cpp	/^    virtual u_result waitforSent(_u32 timeout ) $/;"	f	class:rp::arch::net::DGramSocketImpl
waitforSent	sdk/src/arch/linux/net_socket.cpp	/^    virtual u_result waitforSent(_u32 timeout ) $/;"	f	class:rp::arch::net::StreamSocketImpl
waitforSent	sdk/src/arch/macOS/net_socket.cpp	/^    virtual u_result waitforSent(_u32 timeout ) $/;"	f	class:rp::arch::net::DGramSocketImpl
waitforSent	sdk/src/arch/macOS/net_socket.cpp	/^    virtual u_result waitforSent(_u32 timeout ) $/;"	f	class:rp::arch::net::StreamSocketImpl
waitforSent	sdk/src/arch/win32/net_socket.cpp	/^    virtual u_result waitforSent(_u32 timeout ) $/;"	f	class:rp::arch::net::DGramSocketImpl
waitforSent	sdk/src/arch/win32/net_socket.cpp	/^    virtual u_result waitforSent(_u32 timeout ) $/;"	f	class:rp::arch::net::StreamSocketImpl
waitfordata	sdk/src/arch/linux/net_serial.cpp	/^int raw_serial::waitfordata(size_t data_count, _u32 timeout, size_t * returned_size)$/;"	f	class:rp::arch::net::raw_serial
waitfordata	sdk/src/arch/macOS/net_serial.cpp	/^int raw_serial::waitfordata(_word_size_t data_count, _u32 timeout, _word_size_t * returned_size)$/;"	f	class:rp::arch::net::raw_serial
waitfordata	sdk/src/arch/win32/net_serial.cpp	/^int raw_serial::waitfordata(size_t data_count, _u32 timeout, size_t * returned_size)$/;"	f	class:rp::arch::net::raw_serial
waitfordata	sdk/src/rplidar_driver_TCP.h	/^    bool waitfordata(size_t data_count,_u32 timeout = -1, size_t * returned_size = NULL)$/;"	f	class:rp::standalone::rplidar::TCPChannelDevice
waitfordata	sdk/src/rplidar_driver_serial.h	/^    bool waitfordata(size_t data_count,_u32 timeout = -1, size_t * returned_size = NULL)$/;"	f	class:rp::standalone::rplidar::SerialChannelDevice
waitforrecv	sdk/src/arch/linux/net_serial.cpp	/^int raw_serial::waitforrecv(_u32 timeout, size_t * returned_size)$/;"	f	class:rp::arch::net::raw_serial
waitforrecv	sdk/src/arch/macOS/net_serial.cpp	/^int raw_serial::waitforrecv(_u32 timeout, _word_size_t * returned_size)$/;"	f	class:rp::arch::net::raw_serial
waitforrecv	sdk/src/arch/win32/net_serial.cpp	/^int raw_serial::waitforrecv(_u32 timeout, size_t * returned_size)$/;"	f	class:rp::arch::net::raw_serial
waitforsent	sdk/src/arch/linux/net_serial.cpp	/^int raw_serial::waitforsent(_u32 timeout, size_t * returned_size)$/;"	f	class:rp::arch::net::raw_serial
waitforsent	sdk/src/arch/macOS/net_serial.cpp	/^int raw_serial::waitforsent(_u32 timeout, _word_size_t * returned_size)$/;"	f	class:rp::arch::net::raw_serial
waitforsent	sdk/src/arch/win32/net_serial.cpp	/^int raw_serial::waitforsent(_u32 timeout, size_t * returned_size)$/;"	f	class:rp::arch::net::raw_serial
working_flags	sdk/include/rplidar_cmd.h	/^    _u16  working_flags;$/;"	m	struct:_rplidar_payload_express_scan_t
working_mode	sdk/include/rplidar_cmd.h	/^    _u8   working_mode;$/;"	m	struct:_rplidar_payload_express_scan_t
~AutoLocker	sdk/src/hal/locker.h	/^    ~AutoLocker() {_binded.unlock();}$/;"	f	class:rp::hal::AutoLocker
~DGramSocket	sdk/src/hal/socket.h	/^    virtual ~DGramSocket() {} \/\/ use dispose();$/;"	f	class:rp::net::DGramSocket
~DGramSocketImpl	sdk/src/arch/linux/net_socket.cpp	/^    virtual ~DGramSocketImpl() $/;"	f	class:rp::arch::net::DGramSocketImpl
~DGramSocketImpl	sdk/src/arch/macOS/net_socket.cpp	/^    virtual ~DGramSocketImpl() $/;"	f	class:rp::arch::net::DGramSocketImpl
~DGramSocketImpl	sdk/src/arch/win32/net_socket.cpp	/^    virtual ~DGramSocketImpl() $/;"	f	class:rp::arch::net::DGramSocketImpl
~Event	sdk/src/hal/event.h	/^    ~ Event()$/;"	f	class:rp::hal::Event
~Locker	sdk/src/hal/locker.h	/^    ~Locker()$/;"	f	class:rp::hal::Locker
~RPlidarDriver	sdk/include/rplidar_driver.h	/^    virtual ~RPlidarDriver() {}$/;"	f	class:rp::standalone::rplidar::RPlidarDriver
~RPlidarDriverImplCommon	sdk/src/rplidar_driver_impl.h	/^    virtual ~RPlidarDriverImplCommon() {}$/;"	f	class:rp::standalone::rplidar::RPlidarDriverImplCommon
~RPlidarDriverSerial	sdk/src/rplidar_driver.cpp	/^RPlidarDriverSerial::~RPlidarDriverSerial()$/;"	f	class:rp::standalone::rplidar::RPlidarDriverSerial
~RPlidarDriverTCP	sdk/src/rplidar_driver.cpp	/^RPlidarDriverTCP::~RPlidarDriverTCP()$/;"	f	class:rp::standalone::rplidar::RPlidarDriverTCP
~SocketAddress	sdk/src/arch/linux/net_socket.cpp	/^SocketAddress::~SocketAddress()$/;"	f	class:rp::net::SocketAddress
~SocketAddress	sdk/src/arch/macOS/net_socket.cpp	/^SocketAddress::~SocketAddress()$/;"	f	class:rp::net::SocketAddress
~SocketAddress	sdk/src/arch/win32/net_socket.cpp	/^SocketAddress::~SocketAddress()$/;"	f	class:rp::net::SocketAddress
~SocketBase	sdk/src/hal/socket.h	/^    virtual ~SocketBase() {}$/;"	f	class:rp::net::SocketBase
~StreamSocket	sdk/src/hal/socket.h	/^    virtual ~StreamSocket() {} \/\/ use dispose();$/;"	f	class:rp::net::StreamSocket
~StreamSocketImpl	sdk/src/arch/linux/net_socket.cpp	/^    virtual ~StreamSocketImpl() $/;"	f	class:rp::arch::net::StreamSocketImpl
~StreamSocketImpl	sdk/src/arch/macOS/net_socket.cpp	/^    virtual ~StreamSocketImpl() $/;"	f	class:rp::arch::net::StreamSocketImpl
~StreamSocketImpl	sdk/src/arch/win32/net_socket.cpp	/^    virtual ~StreamSocketImpl() $/;"	f	class:rp::arch::net::StreamSocketImpl
~Thread	sdk/src/hal/thread.h	/^    ~Thread() { }$/;"	f	class:rp::hal::Thread
~raw_serial	sdk/src/arch/linux/net_serial.cpp	/^raw_serial::~raw_serial()$/;"	f	class:rp::arch::net::raw_serial
~raw_serial	sdk/src/arch/macOS/net_serial.cpp	/^raw_serial::~raw_serial()$/;"	f	class:rp::arch::net::raw_serial
~raw_serial	sdk/src/arch/win32/net_serial.cpp	/^raw_serial::~raw_serial()$/;"	f	class:rp::arch::net::raw_serial
~serial_rxtx	sdk/src/hal/abs_rxtx.h	/^    virtual ~serial_rxtx(){}$/;"	f	class:rp::hal::serial_rxtx
